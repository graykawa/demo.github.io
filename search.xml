<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Acwing蓝桥杯辅导课之双指针、BFS和图论</title>
      <link href="/2022/12/25/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/"/>
      <url>/2022/12/25/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="tip info"><p><strong>文章内容主要是对课程学习的一个总结，同时也是方便自己日后的复习和有需要人士的学习。</strong></p></div><h3 id="课程提纲"><a href="#课程提纲" class="headerlink" title="课程提纲"></a>课程提纲</h3><ol><li><strong>Acwing1237.螺旋折线</strong></li><li><strong>双指针</strong><ul><li><strong>双指针模板</strong></li><li><strong>Acwing1238.日志统计</strong></li></ul></li><li><strong>BFS</strong><ul><li><strong>BFS模板</strong></li><li><strong>Acwing1101.献给阿尔吉侬的花束</strong></li></ul></li><li><strong>图论</strong><ul><li><strong>Acwing1224.交换瓶子</strong></li></ul></li></ol><h3 id="Acwing1237-螺旋折线"><a href="#Acwing1237-螺旋折线" class="headerlink" title="Acwing1237.螺旋折线"></a>Acwing1237.螺旋折线</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1239/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>如下图所示的螺旋折线经过平面上所有整点恰好一次。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.ax1x.com/2022/12/25/zv6c0x.png" alt="螺旋折线图"/></div><span class="image-caption">螺旋折线图</span></div><p>对于整点 (X,Y)，我们定义它到原点的距离 dis(X,Y) 是从原点到 (X,Y) 的螺旋折线段的长度。</p><p>例如 dis(0,1)=3,dis(−2,−1)=9</p><p>给出整点坐标 (X,Y)，你能计算出 dis(X,Y) 吗？<br><strong>输入格式</strong><br>包含两个整数 X,Y。</p><p><strong>输出格式</strong><br>输出一个整数，表示 dis(X,Y)。</p><p><strong>数据范围</strong><br>−10^9 ≤ X,Y ≤ 10^9</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>对于上面这样一道题，我们首先想到的应该是<u>模拟</u>。但由于题目所给的<u>数据范围较大</u>，如果采用直接模拟的方式，大概率是<u>超时</u>的，但也能够在比赛中<u>取得一个比较不错的分数</u>。从数据范围我们也不难发现，这应该是一道<u>找规律</u>的题目。为此我们给图上的每个点进行标注，可以得到如下的规律。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.ax1x.com/2022/12/25/zv6RAK.png" alt="标注规律"/></div><span class="image-caption">标注规律</span></div><p>由此，我们不难写出以下代码。</p></div><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(x) &lt;= y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = y;</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n - <span class="number">1</span>) * (<span class="number">2</span> * n) + x - (-n) &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(y) &lt;= x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = x;</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n) * (<span class="number">2</span> * n) + (n - y) &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(x) &lt;= <span class="built_in">abs</span>(y) + <span class="number">1</span> &amp;&amp; y &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">abs</span>(y);</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n) * (<span class="number">2</span> * n + <span class="number">1</span>) + (n - x) &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">abs</span>(x);</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n - <span class="number">1</span>) * (<span class="number">2</span> * n - <span class="number">1</span>) + y - (-n + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1238-日志统计"><a href="#Acwing1238-日志统计" class="headerlink" title="Acwing1238.日志统计"></a>Acwing1238.日志统计</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1240/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有 N 行。</p><p>其中每一行的格式是：</p><blockquote><p>ts id</p></blockquote><p>表示在 ts 时刻编号 id 的帖子收到一个”赞”。</p><p>现在小明想统计有哪些帖子曾经是”热帖”。</p><p>如果一个帖子曾在任意一个长度为 D 的时间段内收到不少于 K 个赞，小明就认为这个帖子曾是”热帖”。</p><p>具体来说，如果存在某个时刻 T 满足该帖在 [T,T+D) 这段时间内(注意是左闭右开区间)收到不少于 K 个赞，该帖就曾是”热帖”。</p><p>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。</p><p><strong>输入格式</strong><br>第一行包含三个整数 N,D,K。</p><p>以下 N 行每行一条日志，包含两个整数 ts 和 id。</p><p><strong>输出格式</strong><br>按从小到大的顺序输出热帖 id。</p><p>每个 id 占一行。</p><p><strong>数据范围</strong><br>1 ≤ K ≤ N ≤ 10^5,<br>0 ≤ts,id≤ 10^5,<br>1 ≤ D ≤ 10000</p><p><strong>输入样例:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">100</span> <span class="number">3</span></span><br><span class="line"><span class="number">100</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>读题后我们可以发现，通过<u>遍历长度为D的时间段，并每次统计时间段内id的获赞数， 当cnt&gt;=K时进行标记</u>即可得到所求结果。但实现代码后，<u>时间复杂度为O（N * D）</u>，题目给出的数据范围经计算后会超时，所以我们需要继续优化。对于每个时间段统计的获赞数，我们发现<u>实际上有很多重复的部分，在时间段移动的过程中，日志记录只会变化前后一段</u>，为此我们可以使用<u>双指针进行优化</u>。由此，我们不难写出以下代码。</p></div><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">int</span> n,d,k;</span><br><span class="line">PII logs[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; logs[i].first &gt;&gt; logs[i].second;</span><br><span class="line">    <span class="built_in">sort</span>(logs,logs + n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> id = logs[i].second;</span><br><span class="line">        <span class="comment">//当前id的日志数量+1</span></span><br><span class="line">        cnt[id]++;</span><br><span class="line">        <span class="comment">//删掉之前超出时间段的日志</span></span><br><span class="line">        <span class="keyword">while</span>(logs[i].first - logs[j].first &gt;= d)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[logs[j].second]--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt[id] &gt;= k) st[id] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100005</span>;i++) <span class="keyword">if</span>(st[i]) cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1101-献给阿尔吉侬的花束"><a href="#Acwing1101-献给阿尔吉侬的花束" class="headerlink" title="Acwing1101.献给阿尔吉侬的花束"></a>Acwing1101.献给阿尔吉侬的花束</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1103/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>阿尔吉侬是一只聪明又慵懒的小白鼠，它最擅长的就是走各种各样的迷宫。</p><p>今天它要挑战一个非常大的迷宫，研究员们为了鼓励阿尔吉侬尽快到达终点，就在终点放了一块阿尔吉侬最喜欢的奶酪。</p><p>现在研究员们想知道，如果阿尔吉侬足够聪明，它最少需要多少时间就能吃到奶酪。</p><p>迷宫用一个 R×C 的字符矩阵来表示。</p><p>字符 S 表示阿尔吉侬所在的位置，字符 E 表示奶酪所在的位置，字符 # 表示墙壁，字符 . 表示可以通行。</p><p>阿尔吉侬在 1 个单位时间内可以从当前的位置走到它上下左右四个方向上的任意一个位置，但不能走出地图边界。</p><p><strong>输入格式</strong><br>第一行是一个正整数 T，表示一共有 T 组数据。</p><p>每一组数据的第一行包含了两个用空格分开的正整数 R 和 C，表示地图是一个 R×C 的矩阵。</p><p>接下来的 R 行描述了地图的具体内容，每一行包含了 C 个字符。字符含义如题目描述中所述。保证有且仅有一个 S 和 E。</p><p><strong>输出格式</strong><br>对于每一组数据，输出阿尔吉侬吃到奶酪的最少单位时间。</p><p>若阿尔吉侬无法吃到奶酪，则输出“oop!”（只输出引号里面的内容，不输出引号）。</p><p>每组数据的输出结果占一行。</p><p><strong>数据范围</strong><br>1&lt; T ≤ 10,<br>2 ≤ R,C ≤ 200</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">.S..</span><br><span class="line">###.</span><br><span class="line">..E.</span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">.S..</span><br><span class="line">.E..</span><br><span class="line">....</span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">.S..</span><br><span class="line">####</span><br><span class="line">..E.</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">oop!</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题本质上就是一个<u>简单的棋盘BFS模型</u>，BFS一般有两种模型：<span class='nota' data-nota='棋盘模型，顾名思义，就是在棋盘上BFS的过程，其中每个棋盘方格作为BFS的一个状态进行转移，常见的棋盘有迷宫，地图等'>棋盘模型</span>和<span class='nota' data-nota='状态模型，可以看成一种广义的棋盘模型，它是将整个棋盘的状态当作BFS的一个状态进行转移，常见的状态有八数码游戏等'>状态模型</span>，那么万变不离其宗还是套BFS模板，由此，根据题意进行转换，我们不难写出以下代码。</p></div><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(PII start,PII end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;PII&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">-1</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[start.first][start.second] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span>(end == t) <span class="keyword">return</span> dist[end.first][end.second];</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = t.first + dx[i],y = t.second + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(g[x][y] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dist[x][y] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dist[x][y] = dist[t.first][t.second] + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        PII start,end;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; g[i][j];</span><br><span class="line">                <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;S&#x27;</span>) start = &#123;i,j&#125;;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;E&#x27;</span>) end = &#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">bfs</span>(start,end);</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;oop!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Acwing1224-交换瓶子"><a href="#Acwing1224-交换瓶子" class="headerlink" title="Acwing1224.交换瓶子"></a>Acwing1224.交换瓶子</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1226/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>有 N 个瓶子，编号 1∼N，放在架子上。</p><p>比如有 5 个瓶子：</p><p>2 1 3 5 4<br>要求每次拿起 2 个瓶子，交换它们的位置。</p><p>经过若干次后，使得瓶子的序号为：</p><p>1 2 3 4 5<br>对于这么简单的情况，显然，至少需要交换 2 次就可以复位。</p><p>如果瓶子更多呢？你可以通过编程来解决。</p><p><strong>输入格式</strong><br>第一行包含一个整数 N，表示瓶子数量。</p><p>第二行包含 N 个整数，表示瓶子目前的排列状况。</p><p><strong>输出格式</strong><br>输出一个正整数，表示至少交换多少次，才能完成排序。</p><p><strong>数据范围</strong><br>1 ≤ N ≤ 10000,</p><p><strong>输入样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><br><strong>输出样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><br><strong>输入样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><br><strong>输出样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题本身是一道<u>很经典的题目，思维非常巧妙</u>，尽管它归属图论部分，也只是因为<u>它的本质用到了图论的置换群</u>。我们将<u>每个数字与它应在位置的数字连一条边</u>，可得到如下的图。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://s1.ax1x.com/2022/12/25/zv6Icd.png"/></div></div><p>并且我们可以发现，<u>交换一对环内的数字</u>，就是将两条边的方向置换，<u>即将一个环拆分成两个环</u>；<u>交换一对环外的数字</u>，也是将两条边的方向置换，<u>但是将两个环合并成一个环</u>。</p><p>假定有k个这样的环，我们会发现，通过这两种操作，至少只需要n - k次就可以将所有的数字变为自环。</p></div><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i;!st[j];j = a[j]) st[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n - cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> BFS </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6部分新特性</title>
      <link href="/2022/12/23/ES6%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/12/23/ES6%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="note default modern"><p><strong>下面只是对于<mark class="hl-label blue">后端所需知识</mark> 的补充。并非完整的ES6新特性，如有相应需求可查看官网文档进行学习。</strong><br><strong>由于JS官方文档是全英文的，不方便大家学习。这里给大家提供一个比较友好的中文文档，请点这里<a class="btn-beautify pink larger" href="http://caibaojian.com/es6/"   title="caibaojian"><i class="far fa-hand-point-right"></i><span>caibaojian</span></a></strong></p></div><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>; <span class="comment">//a有作用域范围,且不能再次声明</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">5</span>;<span class="comment">//const用于定义常量</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span>[x,y,z] = arr; <span class="comment">//将arr的值分别赋予x,y,z</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:username,age&#125; = person</span><br><span class="line"><span class="comment">//这里将person对象的值分别赋予name和age</span></span><br><span class="line"><span class="comment">//且给name取别名为username</span></span><br></pre></td></tr></table></figure><h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h3><h4 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello.vue&quot;</span></span><br><span class="line"><span class="comment">//是否以...开头</span></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">//是否以...结尾</span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&quot;.vue&quot;</span>)</span><br><span class="line"><span class="comment">//是否包含...</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;e&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可将一大段字符串放在``中</span></span><br><span class="line"><span class="keyword">let</span> ss = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">   &lt;span&gt;hello&lt;/span&gt;</span></span><br><span class="line"><span class="string">   &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">//在模板字符串中可用插值语法$&#123;JS表达式&#125;</span></span><br><span class="line"><span class="keyword">let</span> info = <span class="string">&#x27;我是$&#123;name&#125;,今年$&#123;age + 10&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="函数与对象"><a href="#函数与对象" class="headerlink" title="函数与对象"></a>函数与对象</h3><h4 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a,b = <span class="number">1</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不定参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">...values</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> values.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="comment">//只有一句</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">print</span> = (<span class="params">a,b</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line"><span class="comment">//只需返回</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">a,b</span>) =&gt; a + b</span><br><span class="line"><span class="comment">//一般形式</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">normal</span> = (<span class="params">a,b,c</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = a + b + c</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解构</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">hello</span> = (<span class="params">&#123;name&#125;</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span> + name)</span><br></pre></td></tr></table></figure><h4 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h4><p>灵活利用Object提供的方法，有时候能极大简化代码!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取key,value,entry</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(person)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(person)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">const</span> one = &#123;a : <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> two = &#123;b : <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> three = &#123;c : <span class="number">3</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(one,two,three)</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明对象简写</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">23</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;<span class="attr">name</span>: name,age : age&#125;</span><br><span class="line"><span class="comment">//变量与对象属性同名,可简写为:</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;name,age&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象函数简写</span></span><br><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params">food</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃&#x27;</span> + food)    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//箭头函数的this指向windows,不能使用this</span></span><br><span class="line">    <span class="attr">eat2</span>: <span class="function"><span class="params">food</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span> + <span class="string">&#x27;吃&#x27;</span> + food)</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">eat3</span>(<span class="params">food</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃&#x27;</span> + food)    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝对象</span></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">let</span> someone = &#123;...person&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">let</span> age1 = &#123;<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">let</span> name1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//像name等属性重名,会被后来的属性覆盖</span></span><br><span class="line"><span class="keyword">let</span> p1 = &#123;...age1,...name1&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h3><h4 id="map和reduce"><a href="#map和reduce" class="headerlink" title="map和reduce"></a>map和reduce</h4><p>map用于处理数组，reduce用于计算数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将arr经过map中的函数处理后返回</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">arr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//为arr中的每一个元素执行该函数</span></span><br><span class="line"><span class="comment">//参数1.先前处理的值  参数2.当前处理的值</span></span><br><span class="line"><span class="comment">//参数3.数组下标</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">40</span>,-<span class="number">2</span>,<span class="number">5</span>,-<span class="number">1</span>]</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Promise异步编排"><a href="#Promise异步编排" class="headerlink" title="Promise异步编排"></a>Promise异步编排</h3><h4 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//异步操作</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;www.xxx.com&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一次异步获取的结果&quot;</span> + data)</span><br><span class="line">            <span class="title function_">resolve</span>(data)        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)                              </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">obj</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>:<span class="string">` www.other.com + <span class="subst">$&#123;obj.id&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二次异步获取的结果&quot;</span> + data)</span><br><span class="line">                    <span class="title function_">resolve</span>(data)                </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err)                </span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">obj2</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//...继续发送异步请求</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">            </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树与树状数组</title>
      <link href="/2022/12/23/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2022/12/23/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="有关单点修改，区间查询的两个算法"><a href="#有关单点修改，区间查询的两个算法" class="headerlink" title="有关单点修改，区间查询的两个算法"></a>有关单点修改，区间查询的两个算法</h2><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],tr[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = u;i &lt;= n;i += <span class="built_in">lowbit</span>(i)) tr[i] += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = u;i &gt; <span class="number">0</span>;i -= <span class="built_in">lowbit</span>(i)) sum += tr[i];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">add</span>(i,a[i]);</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k,x,y;</span><br><span class="line">        cin &gt;&gt; k &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(!k) cout &lt;&lt; <span class="built_in">query</span>(y) - <span class="built_in">query</span>(x - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">&#125;tr[<span class="number">4</span> * N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[u].sum = tr[u &lt;&lt; <span class="number">1</span>].sum + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) tr[u] = &#123;l,r,a[r]&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tr[u] = &#123;l,r&#125;;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>,l,mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) sum = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) sum += <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> a,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l == tr[u].r) tr[u].sum += v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>,a,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,a,v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;k,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(!k) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,x,y));</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(<span class="number">1</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多请查看: <a href="https://www.acwing.com/user/myspace/index/194557/">我的Acwing主页</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
