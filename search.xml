<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexoの魔改之追番列表</title>
      <link href="/2022/12/27/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E8%BF%BD%E7%95%AA%E5%88%97%E8%A1%A8/"/>
      <url>/2022/12/27/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E8%BF%BD%E7%95%AA%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="安装bangumi插件"><a href="#安装bangumi插件" class="headerlink" title="安装bangumi插件"></a>安装bangumi插件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-bilibili-bangumi</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>将下面的简化配置信息写入_config.yml中，并非主题配置文件。</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 番剧列表</span></span><br><span class="line"><span class="attr">bangumi:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">vmid:</span> <span class="number">11865683</span> <span class="comment">#B站的UID</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">追番列表</span> <span class="comment">#番剧页面的标题</span></span><br><span class="line">  <span class="attr">quote:</span> <span class="string">生命不息，追番不止！</span></span><br><span class="line">  <span class="attr">show:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">loading:</span> <span class="string">https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/cover/bochi-head.gif</span> <span class="comment">#加载时的图片,我这里用的是波奇酱的甩头(偷笑)</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>配置属性</th><th>含义</th></tr></thead><tbody><tr><td>enable</td><td>是否启用</td></tr><tr><td>vmid</td><td>B站的UID</td></tr><tr><td>title</td><td>番剧页面的标题</td></tr><tr><td>quote</td><td>写在页面内容开头的一段话，支持 html 语法</td></tr><tr><td>show</td><td>初始显示页面：0: 想看 , 1: 在看 , 2: 看过，默认为 1</td></tr><tr><td>loading</td><td>图片加载完成前的 loading 图片</td></tr></tbody></table></div><div class="note simple"><p>更详细的配置属性可查看作者的教程，<a href="https://github.com/HCLonely/hexo-bilibili-bangumi">Bangumi插件</a>。<br>B站UID获取请进入<a href="https://space.bilibili.com/">个人主页</a>，网站最后一串数字就是UID。</p></div><h3 id="创建bangumi页面并配置"><a href="#创建bangumi页面并配置" class="headerlink" title="创建bangumi页面并配置"></a>创建bangumi页面并配置</h3><p><strong>在Hexo项目的根目录下进入控制台，创建bangumis页面。</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page bangumis</span><br></pre></td></tr></table></figure></p><p><strong>在bangumis页面的index.md文件中，标注type为bangumis</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">---</span></span><br><span class="line">title: bangumis</span><br><span class="line">date: <span class="number">2022</span><span class="literal">-12-27</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48</span></span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;bangumis&quot;</span></span><br><span class="line"><span class="literal">---</span></span><br></pre></td></tr></table></figure></p><p><strong>并且在主题配置文件_config.butterfly.yml中加入bangumis页面的路由配置</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="string">番剧:</span> <span class="string">/bangumis/</span> <span class="string">||</span> <span class="string">fa-brands</span> <span class="string">fa-youtube</span></span><br></pre></td></tr></table></figure></p><h3 id="加载番剧数据"><a href="#加载番剧数据" class="headerlink" title="加载番剧数据"></a>加载番剧数据</h3><p><strong>在运行或部署前，最好先加载一次番剧的数据。这里有两个注意点：<mark class="hl-label pink">B站需要公开追番</mark>  和 <mark class="hl-label orange">记得开梯子</mark> (<u>因为bangumi官网在国外，可能出现加载数据失败的情况</u>)。</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo bangumi <span class="literal">-u</span> &amp;&amp; hexo clean &amp;&amp; hexo g <span class="literal">-d</span></span><br></pre></td></tr></table></figure></p><p><strong>最后运行项目，查看bangumis页面是否有追番列表。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%BF%BD%E7%95%AA%E5%88%97%E8%A1%A8/result.png"/></div></div></p>]]></content>
      
      
      <categories>
          
          <category> Hexoの魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker最详细的实战教程</title>
      <link href="/2022/12/27/Docker%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"/>
      <url>/2022/12/27/Docker%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="tip info"><p><strong>这篇笔记也是本人在学习Docker时经常翻阅的内容，写的非常完整详细，如今在此补上。如还有不清楚的内容，可参考周阳老师的<a href="https://www.bilibili.com/video/BV1gr4y1U7CY/?spm_id_from=333.999.0.0">Docker教程</a></strong></p></div><h3 id="笔记正文"><a href="#笔记正文" class="headerlink" title="笔记正文"></a>笔记正文</h3><a class="btn-beautify blue larger" href="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Docker%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/Docker2022.html"   title="下载笔记"><i class="far fa-hand-point-right"></i><span>下载笔记</span></a><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://love.code-gray.com/" frameborder="1" scrolling="yes" width="320" height="240"</iframe></div>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假每日一题 &amp; 双指针、BFS与图论(习题课)</title>
      <link href="/2022/12/26/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20&amp;%20%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E4%B8%8E%E5%9B%BE%E8%AE%BA(%E4%B9%A0%E9%A2%98%E8%AF%BE)/"/>
      <url>/2022/12/26/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20&amp;%20%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E4%B8%8E%E5%9B%BE%E8%AE%BA(%E4%B9%A0%E9%A2%98%E8%AF%BE)/</url>
      
        <content type="html"><![CDATA[<h3 id="Acwing4261-孤独的照片"><a href="#Acwing4261-孤独的照片" class="headerlink" title="Acwing4261.孤独的照片"></a>Acwing4261.孤独的照片</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/description/4264/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>Farmer John 最近购入了 N 头新的奶牛，每头奶牛的品种是更赛牛（Guernsey）或荷斯坦牛（Holstein）之一。</p><p>奶牛目前排成一排，Farmer John 想要为每个连续不少于三头奶牛的序列拍摄一张照片。</p><p>然而，他不想拍摄这样的照片，其中只有一头牛的品种是更赛牛，或者只有一头牛的品种是荷斯坦牛——他认为这头奇特的牛会感到孤立和不自然。</p><p>在为每个连续不少于三头奶牛的序列拍摄了一张照片后，他把所有「孤独的」照片，即其中只有一头更赛牛或荷斯坦奶牛的照片，都扔掉了。</p><p>给定奶牛的排列方式，请帮助 Farmer John 求出他会扔掉多少张孤独的照片。</p><p>如果两张照片以不同位置的奶牛开始或结束，则认为它们是不同的。</p><p><strong>输入格式</strong><br>输入的第一行包含 N。</p><p>输入的第二行包含一个长为 N 的字符串。如果队伍中的第 i 头奶牛是更赛牛，则字符串的第 i 个字符为 G。否则，第 i 头奶牛是荷斯坦牛，该字符为 H。</p><p><strong>输出格式</strong><br>输出 Farmer John 会扔掉的孤独的照片数量。</p><p><strong>数据范围</strong><br>3 ≤ N ≤ 5×10^5</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line">GHGHG</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p><strong>样例解释</strong><br>这个例子中的每一个长为 3 的子串均恰好包含一头更赛牛或荷斯坦牛——所以这些子串表示孤独的照片，并会被 Farmer John 扔掉。</p><p>所有更长的子串（GHGH、HGHG 和 GHGHG）都可以被接受。</p></div><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>从题目数据范围我们可以发现，<u>暴力枚举子串肯定是行不通的，时间复杂度应该是O（n）或者O（nlogn）</u>。题目的关键是如何找到孤独的牛，从题意出发，通过维护两种牛的数量来判断的话是不太可行的。为此我们不妨思考下，孤独的牛有何特点？<u>当它的左侧或右侧出现连续与它不同的牛时，它便是一头孤独的牛。</u>所以我们只要<u>找到某头牛左右两侧连续不同牛的数量，再利用乘法原理</u>就可以计算出答案了。<br>为此，我们不难写出以下代码，这里为了防止溢出，开了long long。</p></div><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> oxs[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; oxs;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = i - <span class="number">1</span>;</span><br><span class="line">        LL lcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &gt;= <span class="number">0</span> &amp;&amp; oxs[l] != oxs[i])</span><br><span class="line">        &#123;</span><br><span class="line">            lcnt++;</span><br><span class="line">            l--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> r = i + <span class="number">1</span>;</span><br><span class="line">        LL rcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; n &amp;&amp; oxs[r] != oxs[i])</span><br><span class="line">        &#123;</span><br><span class="line">            rcnt++;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        res += lcnt * rcnt + <span class="built_in">max</span>(<span class="number">0LL</span>,lcnt - <span class="number">1</span>) + <span class="built_in">max</span>(<span class="number">0LL</span>,rcnt - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1240-完全二叉树的权值"><a href="#Acwing1240-完全二叉树的权值" class="headerlink" title="Acwing1240.完全二叉树的权值"></a>Acwing1240.完全二叉树的权值</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1242/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>给定一棵包含 N 个节点的完全二叉树，树上每个节点都有一个权值，按从上到下、从左到右的顺序依次是 A1,A2,⋅⋅⋅AN，如下图所示：</p><p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20%26%20%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E4%B8%8E%E5%9B%BE%E8%AE%BA%28%E4%B9%A0%E9%A2%98%E8%AF%BE%29/tree.png"/></div>&lt;/div&gt;<br>现在小明要把相同深度的节点的权值加在一起，他想知道哪个深度的节点权值之和最大？</p><p>如果有多个深度的权值和同为最大，请你输出其中最小的深度。</p><p>注：根的深度是 1。</p><p><strong>输入格式</strong><br>第一行包含一个整数 N。</p><p>第二行包含 N 个整数 A1,A2,⋅⋅⋅AN。</p><p><strong>输出格式</strong><br>输出一个整数代表答案。</p><p><strong>数据范围</strong><br>1 ≤ N ≤ 10^5,<br>−10^5 ≤ Ai ≤ 10^5</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>模拟完全二叉树的每层并求和即可，只是这个过程恰好用到了双指针而已。需要注意的是，这里求和还可以用前缀和优化，常数上会小一些。</p></div><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tr[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) cin &gt;&gt; tr[i];</span><br><span class="line">    LL maxv = INT_MIN;</span><br><span class="line">    <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历每一层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> d = <span class="number">1</span>,i = <span class="number">1</span>;i &lt;= n;d++,i *= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL val = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//每一层累加</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i;j &lt; i + (<span class="number">1</span> &lt;&lt; d - <span class="number">1</span>) &amp;&amp; j &lt;= n;j++) val += tr[j];</span><br><span class="line">        <span class="keyword">if</span>(val &gt; maxv)</span><br><span class="line">        &#123;</span><br><span class="line">            maxv = val;</span><br><span class="line">            depth = d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; depth &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1096-地牢大师"><a href="#Acwing1096-地牢大师" class="headerlink" title="Acwing1096.地牢大师"></a>Acwing1096.地牢大师</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1098/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>你现在被困在一个三维地牢中，需要找到最快脱离的出路！</p><p>地牢由若干个单位立方体组成，其中部分不含岩石障碍可以直接通过，部分包含岩石障碍无法通过。</p><p>向北，向南，向东，向西，向上或向下移动一个单元距离均需要一分钟。</p><p>你不能沿对角线移动，迷宫边界都是坚硬的岩石，你不能走出边界范围。</p><p>请问，你有可能逃脱吗？</p><p>如果可以，需要多长时间？</p><p><strong>输入格式</strong><br>输入包含多组测试数据。</p><p>每组数据第一行包含三个整数 L,R,C 分别表示地牢层数，以及每一层地牢的行数和列数。</p><p>接下来是 L 个 R 行 C 列的字符矩阵，用来表示每一层地牢的具体状况。</p><p>每个字符用来描述一个地牢单元的具体状况。</p><p>其中, 充满岩石障碍的单元格用”#”表示，不含障碍的空单元格用”.”表示，你的起始位置用”S”表示，终点用”E”表示。</p><p>每一个字符矩阵后面都会包含一个空行。</p><p>当输入一行为”0 0 0”时，表示输入终止。</p><p><strong>输出格式</strong><br>每组数据输出一个结果，每个结果占一行。</p><p>如果能够逃脱地牢，则输出”Escaped in x minute(s).”，其中X为逃脱所需最短时间。</p><p>如果不能逃脱地牢，则输出”Trapped!”。</p><p><strong>数据范围</strong><br>1 ≤ L,R,C ≤ 100</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">S....</span><br><span class="line">.###.</span><br><span class="line">.##..</span><br><span class="line">###.#</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">##.##</span><br><span class="line">##...</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#.###</span><br><span class="line">####E</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line">S##</span><br><span class="line">#E#</span><br><span class="line">###</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Escaped in <span class="number">11</span> <span class="built_in">minute</span>(s).</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>本质上就是<a href="https://www.acwing.com/problem/content/1103/">AcWing 1101. 献给阿尔吉侬的花束</a>这题的三维扩展,<br>需要注意的就是坐标偏移量多了上下。</p></div><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PIII</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> L,R,C;</span><br><span class="line"><span class="type">char</span> g[N][N][N];</span><br><span class="line"><span class="type">int</span> dist[N][N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">6</span>] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dy[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dz[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(PIII start,PIII end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;PIII&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">-1</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[start.a][start.b][start.c] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        PIII t = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(t.a == end.a &amp;&amp; t.b == end.b &amp;&amp; t.c == end.c) <span class="keyword">return</span> dist[t.a][t.b][t.c];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">6</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = t.a + dx[i],y = t.b + dy[i],z = t.c + dz[i];</span><br><span class="line">            <span class="comment">//越界</span></span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= L || y &lt; <span class="number">0</span> || y &gt;= R || z &lt; <span class="number">0</span> || z &gt;= C) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//障碍物</span></span><br><span class="line">            <span class="keyword">if</span>(g[x][y][z] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//计算过</span></span><br><span class="line">            <span class="keyword">if</span>(dist[x][y][z] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dist[x][y][z] = dist[t.a][t.b][t.c] + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x,y,z&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; L &gt;&gt; R &gt;&gt; C,L || R || C)</span><br><span class="line">    &#123;</span><br><span class="line">        PIII start,end;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; L;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; R;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; C;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    cin &gt;&gt; g[i][j][k];</span><br><span class="line">                    <span class="keyword">if</span>(g[i][j][k] == <span class="string">&#x27;S&#x27;</span>) start = &#123;i,j,k&#125;;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(g[i][j][k] == <span class="string">&#x27;E&#x27;</span>) end = &#123;i,j,k&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">bfs</span>(start,end);</span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;Trapped!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Escaped in %d minute(s).\n&quot;</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1233-全球变暖"><a href="#Acwing1233-全球变暖" class="headerlink" title="Acwing1233. 全球变暖"></a>Acwing1233. 全球变暖</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1235/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>你有一张某海域 N×N 像素的照片，”.”表示海洋、”#”表示陆地，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">.##....</span><br><span class="line">.##....</span><br><span class="line">....##.</span><br><span class="line">..####.</span><br><span class="line">...###.</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>其中”上下左右”四个方向上连在一起的一片陆地组成一座岛屿，例如上图就有 2 座岛屿。</p><p>由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。</p><p>具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。</p><p>例如上图中的海域未来会变成如下样子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">....#..</span><br><span class="line">.......</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没。</p><p><strong>输入格式</strong><br>第一行包含一个整数N。</p><p>以下 N 行 N 列，包含一个由字符”#”和”.”构成的 N×N 字符矩阵，代表一张海域照片，”#”表示陆地，”.”表示海洋。</p><p>照片保证第 1 行、第 1 列、第 N 行、第 N 列的像素都是海洋。</p><p><strong>输出格式</strong><br>一个整数表示答案。</p><p><strong>数据范围</strong><br>1 ≤ N ≤ 1000</p><p><strong>输入样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line">.......</span><br><span class="line">.##....</span><br><span class="line">.##....</span><br><span class="line">....##.</span><br><span class="line">..####.</span><br><span class="line">...###.</span><br><span class="line">.......</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><strong>输入样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line">.........</span><br><span class="line">.##.##...</span><br><span class="line">.#####...</span><br><span class="line">.##.##...</span><br><span class="line">.........</span><br><span class="line">.##.#....</span><br><span class="line">.#.###...</span><br><span class="line">.#..#....</span><br><span class="line">.........</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题是<span class='nota' data-nota='洪水灌溉算法，可用bfs和dfs两种方式实现，实际就是在图上找连通块的过程。'>Flood Fill</span>的经典应用，<br>在找岛屿的过程中，记录下每个岛屿的总面积和临海面积，即可算出答案。</p></div><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sx,<span class="type">int</span> sy,<span class="type">int</span> &amp; total,<span class="type">int</span> &amp; bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;PII&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;sx,sy&#125;);</span><br><span class="line">    st[sx][sy] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        PII t = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        total++;</span><br><span class="line">        <span class="type">bool</span> is_sea = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = t.x + dx[i],y = t.y + dy[i];</span><br><span class="line">            <span class="comment">//越界</span></span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//是海</span></span><br><span class="line">            <span class="keyword">if</span>(g[x][y] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                is_sea = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//访问过</span></span><br><span class="line">            <span class="keyword">if</span>(st[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">            st[x][y] = <span class="literal">true</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is_sea) bound++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; g[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历每个连通块，统计岛的面积和靠近海的块数</span></span><br><span class="line">            <span class="keyword">if</span>(!st[i][j] &amp;&amp; g[i][j] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> total = <span class="number">0</span>,bound = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">bfs</span>(i,j,total,bound);</span><br><span class="line">                <span class="keyword">if</span>(total == bound) res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1207-大臣的旅费"><a href="#Acwing1207-大臣的旅费" class="headerlink" title="Acwing1207. 大臣的旅费"></a>Acwing1207. 大臣的旅费</h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1209/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>很久以前，T王国空前繁荣。</p><p>为了更好地管理国家，王国修建了大量的快速路，用于连接首都和王国内的各大城市。</p><p>为节省经费，T国的大臣们经过思考，制定了一套优秀的修建方案，使得任何一个大城市都能从首都直接或者通过其他大城市间接到达。</p><p>同时，如果不重复经过大城市，从首都到达每个大城市的方案都是唯一的。</p><p>J是T国重要大臣，他巡查于各大城市之间，体察民情。</p><p>所以，从一个城市马不停蹄地到另一个城市成了J最常做的事情。</p><p>他有一个钱袋，用于存放往来城市间的路费。</p><p>聪明的J发现，如果不在某个城市停下来修整，在连续行进过程中，他所花的路费与他已走过的距离有关，在走第x千米到第x+1千米这一千米中（x是整数），他花费的路费是x+10这么多。也就是说走1千米花费11，走2千米要花费23。</p><p>J大臣想知道：他从某一个城市出发，中间不休息，到达另一个城市，所有可能花费的路费中最多是多少呢？</p><p><strong>输入格式</strong><br>输入的第一行包含一个整数 n，表示包括首都在内的T王国的城市数。</p><p>城市从 1 开始依次编号，1 号城市为首都。</p><p>接下来 n−1 行，描述T国的高速路（T国的高速路一定是 n−1 条）。</p><p>每行三个整数 Pi,Qi,Di，表示城市 Pi 和城市 Qi 之间有一条双向高速路，长度为 Di 千米。</p><p><strong>输出格式</strong><br>输出一个整数，表示大臣J最多花费的路费是多少。</p><p><strong>数据范围</strong><br>1 ≤ n ≤ 10^5,<br>1≤ Pi,Qi ≤ n,<br>1 ≤ Di ≤ 1000</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">2</span> </span><br><span class="line"><span class="number">1</span>  <span class="number">3</span>  <span class="number">1</span> </span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">5</span> </span><br><span class="line"><span class="number">2</span>  <span class="number">5</span>  <span class="number">4</span> </span><br></pre></td></tr></table></figure><br><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">135</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题目本质上就是求一个树的直径，可以当作求树的直径的一种简单的模板背过，因为还有其它更优的方式。这个过程是：<br>先任取树上一点，找到距离该点的最远距离，假定为点u，再重复一次这个过程，找到距离点u的最远距离即为答案。<br>这里存图用的是数组模拟单链表的方式，这里单独把模板抽取出来，仅供参考。</p></div><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>,M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> p,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dist[u] = d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j != p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(j,u,d + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化h</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//求树的直径</span></span><br><span class="line">    <span class="comment">//任取一点，找到距它最远距离的点u</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//再执行一次上面的操作，找到距离u最远的点，即为树的直径</span></span><br><span class="line">    <span class="type">int</span> maxv = INT_MIN,u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dist[i] &gt; maxv)</span><br><span class="line">        &#123;</span><br><span class="line">            maxv = dist[i];</span><br><span class="line">            u = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(u,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    maxv = INT_MIN;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) maxv = <span class="built_in">max</span>(maxv,dist[i]);</span><br><span class="line">    cout &lt;&lt; <span class="number">10</span> * maxv + (maxv + <span class="number">1LL</span>) * maxv / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存图模板</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = 题目给的点数,M = 题目给的边数 / (单向边和点数相同，双向边为点数<span class="number">2</span>倍);</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="comment">//加边函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    ... <span class="comment">//存图的其他信息，这里以边权举例</span></span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ...</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化h</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图的遍历(例如遍历点u的临边)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];i != <span class="number">-1</span>;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取出相邻点j</span></span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="comment">//取出其他信息</span></span><br><span class="line">        <span class="type">int</span> weight = w[i];</span><br><span class="line">        ... <span class="comment">//其他操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>更多请查看: <a href="https://www.acwing.com/user/myspace/index/194557/">我的Acwing主页</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> BFS </tag>
            
            <tag> 图论 </tag>
            
            <tag> 乘法原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexoの魔改之评论系统</title>
      <link href="/2022/12/25/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/12/25/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="tip bell"><p>文章主要讲Hexo下Butterfly主题的添加方式，不同的主题可参考着修改。主要用到了两个技术：一个是MonogoDB提供的云函数，另一个是利用Vercel对云函数进行部署。在学习如何添加前，请读者先粗略浏览一遍Twikoo的官方文档，其实官方写很细致。<a href="https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2">快速上手 | Twikoo文档</a></p></div><hr><h3 id="申请MonogoDB云函数"><a href="#申请MonogoDB云函数" class="headerlink" title="申请MonogoDB云函数"></a>申请MonogoDB云函数</h3><h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><a class="btn-beautify pink larger" href="https://www.mongodb.com/cloud/atlas/register"   title="点击注册"><i class="far fa-hand-point-right"></i><span>点击注册</span></a><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/register-monogoDB.png"/></div></div><div class="note simple"><p>这里根据意思填写即可，主要是邮箱必须有效，后续需要邮箱进行验证。</p></div><h4 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h4><p><strong>点击邮箱验证即可</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/verify-monogoDB.png"/></div></div></p><p><strong>这里MonogoDB会提示你验证成功，点击继续。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/success-verify.png"/></div></div></p><h4 id="填写问卷"><a href="#填写问卷" class="headerlink" title="填写问卷"></a>填写问卷</h4><p><strong>这里最好跟图中保持一致，特别是编程语言必须选JS。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/note-questionaire.png"/></div></div></p><hr><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><strong>选择免费的即可，点击创建。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/choose-db.png"/></div></div></p><p><strong>提供商必须选AWS，地区选US或香港都可以，推荐选择香港，然后点击创建。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/db-setting.png"/></div></div></p><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p><strong>创建一个数据库用户，并将账号密码记下来，然后点击创建用户。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/create-dbuser.png"/></div></div></p><p><strong>将IP为0.0.0.0加入白名单，点击添加，最后点击完成。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/create-dbip.png"/></div></div></p><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p><strong>点击白色的Connect进行连接，选择如下这个进入。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/db-connect1.png"/></div></div></p><p><strong>将红色框中的内容进行复制，将<password>部分替换为自己的数据库密码，并将这段保存下来。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/db-connect2.png"/></div></div></p><hr><h3 id="申请Vercel部署"><a href="#申请Vercel部署" class="headerlink" title="申请Vercel部署"></a>申请Vercel部署</h3><h4 id="注册账号-1"><a href="#注册账号-1" class="headerlink" title="注册账号"></a>注册账号</h4><p><strong>这里强烈推荐GitHub关联注册，非常方便。没有GitHub账号的建议先去注册一个。</strong></p><a class="btn-beautify pink larger" href="https://vercel.com/signup"   title="点击注册"><i class="far fa-hand-point-right"></i><span>点击注册</span></a><h4 id="搭建部署环境"><a href="#搭建部署环境" class="headerlink" title="搭建部署环境"></a>搭建部署环境</h4><p><strong>注册好Vercel账号后，点击下面跳转到部署页面。</strong></p><a class="btn-beautify blue larger" href="https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fimaegoo%2Ftwikoo%2Ftree%2Fmain%2Fsrc%2Fserver%2Fvercel-min"   title="Deploy"><i class="far fa-hand-point-right"></i><span>Deploy</span></a><p><strong>创建一个私有仓库用来部署云函数，名字随便取，点击创建后等待构建完成。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-reposity.png"/></div></div></p><p><strong>出现如下的祝贺表示成功，然后点击右上跳转到控制台。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/congratulation.png"/></div></div></p><hr><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p><strong>依次点击Settings-&gt;Environment Variables进入到环境变量添加，添加环境变量<em>MONGODB_URI</em>，其中值为之前保存的字符串，最后点击保存即可。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-settings1.png"/></div></div></p><p><strong>如果之前数据库地区写了香港，还需要在Settings-&gt;Functions中修改地区为香港，如果是US则可以跳过这一步，最后点击保存即可。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-settings2.png"/></div></div></p><h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h4><p><strong>进入到Deployments，点击右侧三个点，再点击红色标记的Redeploy。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-settings3.png"/></div></div></p><p><strong>勾选图中的Redeploy选项，点击REDEPLOY进行部署,等待状态变为绿色表示部署成功。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-settings4.png"/></div></div></p><p><strong>跳转域名查看云函数是否有效，若出现以下情况，则表示云函数有效。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/func-success.png"/></div></div></p><hr><h3 id="Hexo配置评论"><a href="#Hexo配置评论" class="headerlink" title="Hexo配置评论"></a>Hexo配置评论</h3><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><p><strong>以下主要是针对ButterFly主题的配置，其他主题请参考官方文档进行配置，主要是找云函数链接应该放在哪个属性。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/hexo-settings.png"/></div></div></p><h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><p><strong>运行Hexo，测试评论功能是否可以正常使用。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/hexo-test.png"/></div></div></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><div class="tip bell"><p>以上就是利用Twikoo部署评论功能的全部教程，此文也是在我自己实现这个功能后立刻写出来的。个人认为，当学会一项新技术去分享给别人的时候，不仅能够让更多人受益，同时也给自己带来好心情，还能更好的掌握这项技术，这何尝不是一件美事呢~</p></div>]]></content>
      
      
      <categories>
          
          <category> Hexoの魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机知识 </tag>
            
            <tag> 云函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing蓝桥杯辅导课之双指针、BFS和图论</title>
      <link href="/2022/12/25/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/"/>
      <url>/2022/12/25/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="tip info"><p><strong>文章内容主要是对课程学习的一个总结，同时也是方便自己日后的复习和有需要人士的学习。</strong></p></div><hr><h3 id="课程提纲"><a href="#课程提纲" class="headerlink" title="课程提纲"></a>课程提纲</h3><ol><li><strong>Acwing1237.螺旋折线</strong></li><li><strong>双指针</strong><ul><li><strong>双指针模板</strong></li><li><strong>Acwing1238.日志统计</strong></li></ul></li><li><strong>BFS</strong><ul><li><strong>BFS模板</strong></li><li><strong>Acwing1101.献给阿尔吉侬的花束</strong></li></ul></li><li><strong>图论</strong><ul><li><strong>Acwing1224.交换瓶子</strong></li></ul></li></ol><hr><h3 id="Acwing1237-螺旋折线"><a href="#Acwing1237-螺旋折线" class="headerlink" title="Acwing1237.螺旋折线"></a>Acwing1237.螺旋折线</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1239/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>如下图所示的螺旋折线经过平面上所有整点恰好一次。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/luoxuanxian.png"/></div></div><p>对于整点 (X,Y)，我们定义它到原点的距离 dis(X,Y) 是从原点到 (X,Y) 的螺旋折线段的长度。</p><p>例如 dis(0,1)=3,dis(−2,−1)=9</p><p>给出整点坐标 (X,Y)，你能计算出 dis(X,Y) 吗？<br><strong>输入格式</strong><br>包含两个整数 X,Y。</p><p><strong>输出格式</strong><br>输出一个整数，表示 dis(X,Y)。</p><p><strong>数据范围</strong><br>−10^9 ≤ X,Y ≤ 10^9</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>对于上面这样一道题，我们首先想到的应该是<u>模拟</u>。但由于题目所给的<u>数据范围较大</u>，如果采用直接模拟的方式，大概率是<u>超时</u>的，但也能够在比赛中<u>取得一个比较不错的分数</u>。从数据范围我们也不难发现，这应该是一道<u>找规律</u>的题目。为此我们给图上的每个点进行标注，可以得到如下的规律。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/zhaoguilv.png"/></div></div><p>由此，我们不难写出以下代码。</p></div><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(x) &lt;= y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = y;</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n - <span class="number">1</span>) * (<span class="number">2</span> * n) + x - (-n) &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(y) &lt;= x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = x;</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n) * (<span class="number">2</span> * n) + (n - y) &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(x) &lt;= <span class="built_in">abs</span>(y) + <span class="number">1</span> &amp;&amp; y &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">abs</span>(y);</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n) * (<span class="number">2</span> * n + <span class="number">1</span>) + (n - x) &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">abs</span>(x);</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n - <span class="number">1</span>) * (<span class="number">2</span> * n - <span class="number">1</span>) + y - (-n + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1238-日志统计"><a href="#Acwing1238-日志统计" class="headerlink" title="Acwing1238.日志统计"></a>Acwing1238.日志统计</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1240/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有 N 行。</p><p>其中每一行的格式是：</p><blockquote><p>ts id</p></blockquote><p>表示在 ts 时刻编号 id 的帖子收到一个”赞”。</p><p>现在小明想统计有哪些帖子曾经是”热帖”。</p><p>如果一个帖子曾在任意一个长度为 D 的时间段内收到不少于 K 个赞，小明就认为这个帖子曾是”热帖”。</p><p>具体来说，如果存在某个时刻 T 满足该帖在 [T,T+D) 这段时间内(注意是左闭右开区间)收到不少于 K 个赞，该帖就曾是”热帖”。</p><p>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。</p><p><strong>输入格式</strong><br>第一行包含三个整数 N,D,K。</p><p>以下 N 行每行一条日志，包含两个整数 ts 和 id。</p><p><strong>输出格式</strong><br>按从小到大的顺序输出热帖 id。</p><p>每个 id 占一行。</p><p><strong>数据范围</strong><br>1 ≤ K ≤ N ≤ 10^5,<br>0 ≤ts,id≤ 10^5,<br>1 ≤ D ≤ 10000</p><p><strong>输入样例:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">100</span> <span class="number">3</span></span><br><span class="line"><span class="number">100</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>读题后我们可以发现，通过<u>遍历长度为D的时间段，并每次统计时间段内id的获赞数， 当cnt&gt;=K时进行标记</u>即可得到所求结果。但实现代码后，<u>时间复杂度为O（N * D）</u>，题目给出的数据范围经计算后会超时，所以我们需要继续优化。对于每个时间段统计的获赞数，我们发现<u>实际上有很多重复的部分，在时间段移动的过程中，日志记录只会变化前后一段</u>，为此我们可以使用<u>双指针进行优化</u>。由此，我们不难写出以下代码。</p></div><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">int</span> n,d,k;</span><br><span class="line">PII logs[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; logs[i].first &gt;&gt; logs[i].second;</span><br><span class="line">    <span class="built_in">sort</span>(logs,logs + n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> id = logs[i].second;</span><br><span class="line">        <span class="comment">//当前id的日志数量+1</span></span><br><span class="line">        cnt[id]++;</span><br><span class="line">        <span class="comment">//删掉之前超出时间段的日志</span></span><br><span class="line">        <span class="keyword">while</span>(logs[i].first - logs[j].first &gt;= d)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[logs[j].second]--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt[id] &gt;= k) st[id] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100005</span>;i++) <span class="keyword">if</span>(st[i]) cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1101-献给阿尔吉侬的花束"><a href="#Acwing1101-献给阿尔吉侬的花束" class="headerlink" title="Acwing1101.献给阿尔吉侬的花束"></a>Acwing1101.献给阿尔吉侬的花束</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1103/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>阿尔吉侬是一只聪明又慵懒的小白鼠，它最擅长的就是走各种各样的迷宫。</p><p>今天它要挑战一个非常大的迷宫，研究员们为了鼓励阿尔吉侬尽快到达终点，就在终点放了一块阿尔吉侬最喜欢的奶酪。</p><p>现在研究员们想知道，如果阿尔吉侬足够聪明，它最少需要多少时间就能吃到奶酪。</p><p>迷宫用一个 R×C 的字符矩阵来表示。</p><p>字符 S 表示阿尔吉侬所在的位置，字符 E 表示奶酪所在的位置，字符 # 表示墙壁，字符 . 表示可以通行。</p><p>阿尔吉侬在 1 个单位时间内可以从当前的位置走到它上下左右四个方向上的任意一个位置，但不能走出地图边界。</p><p><strong>输入格式</strong><br>第一行是一个正整数 T，表示一共有 T 组数据。</p><p>每一组数据的第一行包含了两个用空格分开的正整数 R 和 C，表示地图是一个 R×C 的矩阵。</p><p>接下来的 R 行描述了地图的具体内容，每一行包含了 C 个字符。字符含义如题目描述中所述。保证有且仅有一个 S 和 E。</p><p><strong>输出格式</strong><br>对于每一组数据，输出阿尔吉侬吃到奶酪的最少单位时间。</p><p>若阿尔吉侬无法吃到奶酪，则输出“oop!”（只输出引号里面的内容，不输出引号）。</p><p>每组数据的输出结果占一行。</p><p><strong>数据范围</strong><br>1&lt; T ≤ 10,<br>2 ≤ R,C ≤ 200</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">.S..</span><br><span class="line">###.</span><br><span class="line">..E.</span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">.S..</span><br><span class="line">.E..</span><br><span class="line">....</span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">.S..</span><br><span class="line">####</span><br><span class="line">..E.</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">oop!</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题本质上就是一个<u>简单的棋盘BFS模型</u>，BFS一般有两种模型：<span class='nota' data-nota='棋盘模型，顾名思义，就是在棋盘上BFS的过程，其中每个棋盘方格作为BFS的一个状态进行转移，常见的棋盘有迷宫，地图等'>棋盘模型</span>和<span class='nota' data-nota='状态模型，可以看成一种广义的棋盘模型，它是将整个棋盘的状态当作BFS的一个状态进行转移，常见的状态有八数码游戏等'>状态模型</span>，那么万变不离其宗还是套BFS模板，由此，根据题意进行转换，我们不难写出以下代码。</p></div><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(PII start,PII end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;PII&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">-1</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[start.first][start.second] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span>(end == t) <span class="keyword">return</span> dist[end.first][end.second];</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = t.first + dx[i],y = t.second + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(g[x][y] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dist[x][y] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dist[x][y] = dist[t.first][t.second] + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        PII start,end;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; g[i][j];</span><br><span class="line">                <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;S&#x27;</span>) start = &#123;i,j&#125;;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;E&#x27;</span>) end = &#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">bfs</span>(start,end);</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;oop!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1224-交换瓶子"><a href="#Acwing1224-交换瓶子" class="headerlink" title="Acwing1224.交换瓶子"></a>Acwing1224.交换瓶子</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1226/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>有 N 个瓶子，编号 1∼N，放在架子上。</p><p>比如有 5 个瓶子：</p><p>2 1 3 5 4<br>要求每次拿起 2 个瓶子，交换它们的位置。</p><p>经过若干次后，使得瓶子的序号为：</p><p>1 2 3 4 5<br>对于这么简单的情况，显然，至少需要交换 2 次就可以复位。</p><p>如果瓶子更多呢？你可以通过编程来解决。</p><p><strong>输入格式</strong><br>第一行包含一个整数 N，表示瓶子数量。</p><p>第二行包含 N 个整数，表示瓶子目前的排列状况。</p><p><strong>输出格式</strong><br>输出一个正整数，表示至少交换多少次，才能完成排序。</p><p><strong>数据范围</strong><br>1 ≤ N ≤ 10000,</p><p><strong>输入样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><br><strong>输出样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><br><strong>输入样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><br><strong>输出样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题本身是一道<u>很经典的题目，思维非常巧妙</u>，尽管它归属图论部分，也只是因为<u>它的本质用到了图论的置换群</u>。我们将<u>每个数字与它应在位置的数字连一条边</u>，可得到如下的图。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/zhaoguilv.png"/></div></div><p>并且我们可以发现，<u>交换一对环内的数字</u>，就是将两条边的方向置换，<u>即将一个环拆分成两个环</u>；<u>交换一对环外的数字</u>，也是将两条边的方向置换，<u>但是将两个环合并成一个环</u>。</p><p>假定有k个这样的环，我们会发现，通过这两种操作，至少只需要n - k次就可以将所有的数字变为自环。</p></div><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i;!st[j];j = a[j]) st[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n - cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> BFS </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6部分新特性</title>
      <link href="/2022/12/23/ES6%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/12/23/ES6%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="note default modern"><p><strong>下面只是对于<mark class="hl-label blue">后端所需知识</mark> 的补充。并非完整的ES6新特性，如有相应需求可查看官网文档进行学习。</strong><br><strong>由于JS官方文档是全英文的，不方便大家学习。这里给大家提供一个比较友好的中文文档，请点这里<a class="btn-beautify pink larger" href="http://caibaojian.com/es6/"   title="caibaojian"><i class="far fa-hand-point-right"></i><span>caibaojian</span></a></strong></p></div><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>; <span class="comment">//a有作用域范围,且不能再次声明</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">5</span>;<span class="comment">//const用于定义常量</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span>[x,y,z] = arr; <span class="comment">//将arr的值分别赋予x,y,z</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:username,age&#125; = person</span><br><span class="line"><span class="comment">//这里将person对象的值分别赋予name和age</span></span><br><span class="line"><span class="comment">//且给name取别名为username</span></span><br></pre></td></tr></table></figure><h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h3><h4 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello.vue&quot;</span></span><br><span class="line"><span class="comment">//是否以...开头</span></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">//是否以...结尾</span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&quot;.vue&quot;</span>)</span><br><span class="line"><span class="comment">//是否包含...</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;e&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可将一大段字符串放在``中</span></span><br><span class="line"><span class="keyword">let</span> ss = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">   &lt;span&gt;hello&lt;/span&gt;</span></span><br><span class="line"><span class="string">   &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">//在模板字符串中可用插值语法$&#123;JS表达式&#125;</span></span><br><span class="line"><span class="keyword">let</span> info = <span class="string">&#x27;我是$&#123;name&#125;,今年$&#123;age + 10&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="函数与对象"><a href="#函数与对象" class="headerlink" title="函数与对象"></a>函数与对象</h3><h4 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a,b = <span class="number">1</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不定参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">...values</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> values.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="comment">//只有一句</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">print</span> = (<span class="params">a,b</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line"><span class="comment">//只需返回</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">a,b</span>) =&gt; a + b</span><br><span class="line"><span class="comment">//一般形式</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">normal</span> = (<span class="params">a,b,c</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = a + b + c</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解构</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">hello</span> = (<span class="params">&#123;name&#125;</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span> + name)</span><br></pre></td></tr></table></figure><h4 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h4><p>灵活利用Object提供的方法，有时候能极大简化代码!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取key,value,entry</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(person)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(person)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">const</span> one = &#123;a : <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> two = &#123;b : <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> three = &#123;c : <span class="number">3</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(one,two,three)</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明对象简写</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">23</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;<span class="attr">name</span>: name,age : age&#125;</span><br><span class="line"><span class="comment">//变量与对象属性同名,可简写为:</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;name,age&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象函数简写</span></span><br><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params">food</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃&#x27;</span> + food)    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//箭头函数的this指向windows,不能使用this</span></span><br><span class="line">    <span class="attr">eat2</span>: <span class="function"><span class="params">food</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span> + <span class="string">&#x27;吃&#x27;</span> + food)</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">eat3</span>(<span class="params">food</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃&#x27;</span> + food)    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝对象</span></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">let</span> someone = &#123;...person&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">let</span> age1 = &#123;<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">let</span> name1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//像name等属性重名,会被后来的属性覆盖</span></span><br><span class="line"><span class="keyword">let</span> p1 = &#123;...age1,...name1&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h3><h4 id="map和reduce"><a href="#map和reduce" class="headerlink" title="map和reduce"></a>map和reduce</h4><p>map用于处理数组，reduce用于计算数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将arr经过map中的函数处理后返回</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">arr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//为arr中的每一个元素执行该函数</span></span><br><span class="line"><span class="comment">//参数1.先前处理的值  参数2.当前处理的值</span></span><br><span class="line"><span class="comment">//参数3.数组下标</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">40</span>,-<span class="number">2</span>,<span class="number">5</span>,-<span class="number">1</span>]</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Promise异步编排"><a href="#Promise异步编排" class="headerlink" title="Promise异步编排"></a>Promise异步编排</h3><h4 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//异步操作</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;www.xxx.com&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一次异步获取的结果&quot;</span> + data)</span><br><span class="line">            <span class="title function_">resolve</span>(data)        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)                              </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">obj</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>:<span class="string">` www.other.com + <span class="subst">$&#123;obj.id&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二次异步获取的结果&quot;</span> + data)</span><br><span class="line">                    <span class="title function_">resolve</span>(data)                </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err)                </span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">obj2</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//...继续发送异步请求</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">            </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树与树状数组</title>
      <link href="/2022/12/23/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2022/12/23/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="有关单点修改，区间查询的两个算法"><a href="#有关单点修改，区间查询的两个算法" class="headerlink" title="有关单点修改，区间查询的两个算法"></a>有关单点修改，区间查询的两个算法</h2><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],tr[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = u;i &lt;= n;i += <span class="built_in">lowbit</span>(i)) tr[i] += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = u;i &gt; <span class="number">0</span>;i -= <span class="built_in">lowbit</span>(i)) sum += tr[i];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">add</span>(i,a[i]);</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k,x,y;</span><br><span class="line">        cin &gt;&gt; k &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(!k) cout &lt;&lt; <span class="built_in">query</span>(y) - <span class="built_in">query</span>(x - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">&#125;tr[<span class="number">4</span> * N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[u].sum = tr[u &lt;&lt; <span class="number">1</span>].sum + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) tr[u] = &#123;l,r,a[r]&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tr[u] = &#123;l,r&#125;;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>,l,mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) sum = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) sum += <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> a,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l == tr[u].r) tr[u].sum += v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>,a,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,a,v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;k,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(!k) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,x,y));</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(<span class="number">1</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多请查看: <a href="https://www.acwing.com/user/myspace/index/194557/">我的Acwing主页</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
