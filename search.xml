<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数论 &amp; DFS 值得一做的好题，写完定有收获！</title>
      <link href="/2023/01/03/%E6%95%B0%E8%AE%BA%E4%B9%A0%E9%A2%98%E8%AF%BE/"/>
      <url>/2023/01/03/%E6%95%B0%E8%AE%BA%E4%B9%A0%E9%A2%98%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="最大比例"><a href="#最大比例" class="headerlink" title="最大比例"></a><a href="https://www.acwing.com/problem/content/1225/">最大比例</a></h3><div class="tabs" id="最大比例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#最大比例-1">题目</button></li><li class="tab"><button type="button" data-href="#最大比例-2">代码</button></li><li class="tab"><button type="button" data-href="#最大比例-3">模板</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="最大比例-1"><p><mark class="hl-label blue">正文</mark><br>X星球的某个大奖赛设了 M 级奖励。</p><p>每个级别的奖金是一个正整数。</p><p>并且，相邻的两个级别间的比例是个固定值。</p><p>也就是说：所有级别的奖金数构成了一个等比数列。</p><p>比如：16,24,36,54，其等比值为：3/2。</p><p>现在，我们随机调查了一些获奖者的奖金数。</p><p>请你据此推算可能的最大的等比值。</p><p><mark class="hl-label blue">输入格式</mark><br>第一行为数字 N ，表示接下的一行包含 N 个正整数。</p><p>第二行 N 个正整数 Xi，用空格分开，每个整数表示调查到的某人的奖金数额。</p><p><mark class="hl-label blue">输出格式</mark><br>一个形如 A/B 的分数，要求 A、B 互质，表示可能的最大比例系数。</p><p><mark class="hl-label blue">数据范围</mark><br>0 &lt; N &lt; 100<br>0 &lt; Xi &lt; 10^12<br>数据保证一定有解。</p><p><mark class="hl-label blue">输入样例1：</mark><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1250 200 32</span><br></pre></td></tr></table></figure></p><p><mark class="hl-label blue">输出样例1：</mark><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25/4</span><br></pre></td></tr></table></figure></p><p><mark class="hl-label blue">输入样例2：</mark><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3125 32 32 200</span><br></pre></td></tr></table></figure></p><p><mark class="hl-label blue">输出样例2：</mark><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5/2</span><br></pre></td></tr></table></figure></p><p><mark class="hl-label blue">输入样例3：</mark><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">549755813888 524288 2</span><br></pre></td></tr></table></figure></p><p><mark class="hl-label blue">输出样例3：</mark><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4/1</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="最大比例-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LL x[N],a[N],b[N];</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !b ? a : <span class="built_in">gcd</span>(b,a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更相减损术</span></span><br><span class="line"><span class="function">LL <span class="title">gcd_sub</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//保证a &gt; b</span></span><br><span class="line">    <span class="keyword">if</span>(a &lt; b) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">1</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">gcd_sub</span>(b,a / b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; x[i];</span><br><span class="line">    <span class="built_in">sort</span>(x,x + n);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x[i] != x[i - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            LL d = <span class="built_in">gcd</span>(x[i],x[<span class="number">0</span>]);</span><br><span class="line">            a[cnt] = x[i] / d;</span><br><span class="line">            b[cnt] = x[<span class="number">0</span>] / d;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL up = a[<span class="number">0</span>],down = b[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        up = <span class="built_in">gcd_sub</span>(up,a[i]);</span><br><span class="line">        down = <span class="built_in">gcd_sub</span>(down,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; up &lt;&lt; <span class="string">&#x27;/&#x27;</span> &lt;&lt; down &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="最大比例-3"><div class="note blue modern"><p>注意：<code>更相减损术</code>是另一种求<code>最大公约数</code>的方法，时间上慢于gcd，大概是<code>O（n）</code>的复杂度，但它适用于所有情况求最大公约数。涉及到<code>约分</code>的gcd问题，可以考虑用它。</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更相减损术</span></span><br><span class="line"><span class="function">LL <span class="title">gcd_sub</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//保证a &gt; b</span></span><br><span class="line">    <span class="keyword">if</span>(a &lt; b) <span class="built_in">swap</span>(a,b);</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">1</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">gcd_sub</span>(b,a / b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note blue modern"><p>该题简单分析后，可以转化为<code>求几个分数的最大公约数问题</code>。问题在于，如何求分数的最大公约数呢？这里需要用到<span class='nota' data-nota='更相减损术是出自《九章算术》的一种求最大公约数的算法，它原本是为约分而设计的，但它适用于任何需要求最大公约数的场合。'>更相减损术</span>。</p></div><h3 id="糖果"><a href="#糖果" class="headerlink" title="糖果"></a><a href="https://www.acwing.com/problem/content/1245/">糖果</a></h3><div class="tabs" id="糖果"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#糖果-1">题目</button></li><li class="tab"><button type="button" data-href="#糖果-2">代码</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="糖果-1"><p><mark class="hl-label blue">正文</mark><br>糖果店的老板一共有 M 种口味的糖果出售。</p><p>为了方便描述，我们将 M 种口味编号 1∼M。</p><p>小明希望能品尝到所有口味的糖果。</p><p>遗憾的是老板并不单独出售糖果，而是 K 颗一包整包出售。</p><p>幸好糖果包装上注明了其中 K 颗糖果的口味，所以小明可以在买之前就知道每包内的糖果口味。</p><p>给定 N 包糖果，请你计算小明最少买几包，就可以品尝到所有口味的糖果。</p><p><mark class="hl-label blue">输入格式</mark><br>第一行包含三个整数 N,M,K。</p><p>接下来 N 行每行 K 个整数 T1,T2,⋅⋅⋅,TK，代表一包糖果的口味。</p><p><mark class="hl-label blue">输出格式</mark><br>一个整数表示答案。</p><p>如果小明无法品尝所有口味，输出 −1。</p><p><mark class="hl-label blue">数据范围</mark><br>1 ≤ N ≤ 100,<br>1 ≤ M,K≤ 20,<br>1 ≤ Ti ≤ M</p><p><mark class="hl-label blue">输入样例：</mark><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 5 3</span><br><span class="line">1 1 2</span><br><span class="line">1 2 3</span><br><span class="line">1 1 3</span><br><span class="line">2 3 5</span><br><span class="line">5 4 2</span><br><span class="line">5 1 2</span><br></pre></td></tr></table></figure></p><p><mark class="hl-label blue">输出样例：</mark><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="糖果-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>,M = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="comment">//每列应该选哪些行(每种糖应该选拿包)</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; col[N];</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="comment">//预处理log2</span></span><br><span class="line"><span class="type">int</span> logs2[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//IDA*估计函数(预选糖袋下限)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">h</span><span class="params">(<span class="type">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//过程：对该状态下的每种糖果进行处理，删除包含这种糖果的所有糖袋的状态</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span> - state;i;i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        res++;</span><br><span class="line">        <span class="type">int</span> c = logs2[<span class="built_in">lowbit</span>(i)];</span><br><span class="line">        <span class="comment">//将包含的糖袋均标记</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; col[c].<span class="built_in">size</span>();j++) i &amp;= ~col[c][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//depth表示应该选的糖果包数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> depth,<span class="type">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!depth || <span class="built_in">h</span>(state) &gt; depth) <span class="keyword">return</span> state == (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//确定某种糖果进行选择</span></span><br><span class="line">    <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//二进制优化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span> - state;i;i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//记得取lowbit</span></span><br><span class="line">        <span class="type">int</span> c = logs2[<span class="built_in">lowbit</span>(i)];</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">-1</span> || col[c].<span class="built_in">size</span>() &lt; col[t].<span class="built_in">size</span>()) t = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//选包含这种糖果的糖袋</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; col[t].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(depth - <span class="number">1</span>,state | col[t][i])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;i++) logs2[<span class="number">1</span> &lt;&lt; i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> c;</span><br><span class="line">            cin &gt;&gt; c;</span><br><span class="line">            state |= <span class="number">1</span> &lt;&lt; c - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(state &gt;&gt; j &amp; <span class="number">1</span>) col[j].<span class="built_in">push_back</span>(state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序(每次先选包数最小的糖) 并去重</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(col[i].<span class="built_in">begin</span>(),col[i].<span class="built_in">end</span>());</span><br><span class="line">        col[i].<span class="built_in">erase</span>(<span class="built_in">unique</span>(col[i].<span class="built_in">begin</span>(),col[i].<span class="built_in">end</span>()),col[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//迭代加深(限制糖袋数量)</span></span><br><span class="line">    <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(depth &lt;= m &amp;&amp; !<span class="built_in">dfs</span>(depth,<span class="number">0</span>)) depth++;</span><br><span class="line">    <span class="keyword">if</span>(depth &gt; m) depth = <span class="number">-1</span>;</span><br><span class="line">    cout &lt;&lt; depth &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note blue modern"><p>这题是一道较为复杂的暴搜，也是一种经典的<code>完全覆盖问题</code>。完全覆盖问题的最优解法应该是<code>Dancing Link</code>，有兴趣可以看下<a href="https://zhuanlan.zhihu.com/p/342580800">这篇帖子的讲解</a>。写DFS应该先想搜索顺序，这里我们<code>按照每种糖果来选糖袋</code>，可以保证不漏方案。直接DFS会超时，需要进行一些优化。首先，在顺序上，我们可以<code>先选拥有糖袋较少的糖果</code>。同时采用迭代加深的方式进行DFS，也叫<code>IDA*</code>，也是一种启发式搜索，所以我们还需要一个<code>估价函数</code>，它用来预测当前选取状态之后最少还需要多少糖袋。对于每次选取的状态，我们还可以通过<code>二进制</code>表示，这样可以加快枚举效率。</p></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> DFS </tag>
            
            <tag> IDA* </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing蓝桥杯辅导课之数论</title>
      <link href="/2022/12/29/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E6%95%B0%E8%AE%BA/"/>
      <url>/2022/12/29/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E6%95%B0%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="等差数列"><a href="#等差数列" class="headerlink" title="等差数列"></a>等差数列</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1248/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>数学老师给小明出了一道等差数列求和的题目。</p><p>但是粗心的小明忘记了一部分的数列，只记得其中 N 个整数。</p><p>现在给出这 N 个整数，小明想知道包含这 N 个整数的最短的等差数列有几项？</p><p><font color="skyblue">输入格式</font><br>输入的第一行包含一个整数 N。</p><p>第二行包含 N 个整数 A1,A2,⋅⋅⋅,AN。(注意 A1∼AN 并不一定是按等差数<br>列中的顺序给出)</p><p><font color="skyblue">输出格式</font><br>输出一个整数表示答案。</p><p><font color="skyblue">数据范围</font><br>2 ≤ N ≤ 100000,<br>0 ≤ Ai ≤ 10^9</p><p><font color="skyblue">输入样例：</font><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2 6 4 10 20</span><br></pre></td></tr></table></figure></p><p><font color="skyblue">输出样例：</font><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure></p><p><font color="skyblue">样例解释</font><br>包含 2、6、4、10、20 的最短的等差数列是 2、4、6、8、10、12、14、16、18、20。</p></div><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题一般能想到将题意转化为求几个<code>可能公差</code>之间的<code>最大公约数</code>。所以只要会求<code>最大公约数</code>，这题就迎刃而解。</p></div><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b,a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">sort</span>(a,a + n);</span><br><span class="line">    <span class="comment">//求所有可能作为公差的最大公约数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++) t = <span class="built_in">gcd</span>(t,a[i] - a[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!t)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; (a[n - <span class="number">1</span>] - a[<span class="number">0</span>]) / t + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="skyblue">最大公约数(gcd)模板</font><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b,a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="X的因子链"><a href="#X的因子链" class="headerlink" title="X的因子链"></a>X的因子链</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1297/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>输入正整数 X，求 X 的大于 1 的因子组成的满足任意前一项都能整除后一项的严格递增序列的最大长度，以及满足最大长度的序列的个数。</p><p><font color="skyblue">输入格式</font><br>输入包含多组数据，每组数据占一行，包含一个正整数表示 X。</p><p><font color="skyblue">输出格式</font><br>对于每组数据，输出序列的最大长度以及满足最大长度的序列的个数。</p><p>每个结果占一行。</p><p><font color="skyblue">数据范围</font><br>1 ≤ X ≤ 220</p><p><font color="skyblue">输入样例：</font><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">10</span><br><span class="line">100</span><br></pre></td></tr></table></figure></p><p><font color="skyblue">输出样例：</font><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br><span class="line">2 2</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题题意比较绕，实际问的就是一个数的所有质因数组成的序列的<code>最大长度</code>，以及<code>序列个数</code>，其中序列后一个数必须是前一个数的倍数，且<code>严格递增</code>。本质上是一道<code>组合问题</code>，是基于<code>算术基本定理</code>的。假定我们知道这个数的所有质因数有哪些，以及它们的次数，那么最大长度应该是<code>所有次数之和</code>，而序列个数则是<code>这些次数的组合</code>。<br><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E6%95%B0%E8%AE%BA/q2.png" alt="算术基本定理"><br>图中y总介绍了<code>算术基本定理</code>是什么，以及对于<code>次数的组合</code>的解释。</p></div><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>) + <span class="number">10</span>;</span><br><span class="line"><span class="comment">//线性筛</span></span><br><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="comment">//记录每个合数的最小质因数</span></span><br><span class="line"><span class="type">int</span> minp[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//质数是它自己</span></span><br><span class="line">            minp[i] = i;</span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;primes[j] * i &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            minp[primes[j] * i] = primes[j];</span><br><span class="line">            <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//预处理N-1所有质因数</span></span><br><span class="line">    <span class="built_in">get_primes</span>(N - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//分别存储质因数 和 幂</span></span><br><span class="line">    <span class="type">int</span> fact[<span class="number">30</span>],sum[N];</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x) != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//tot表示T所有质因数幂之和</span></span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>,tot = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//分解T的质因数</span></span><br><span class="line">        <span class="keyword">while</span>(x &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> p = minp[x];</span><br><span class="line">            fact[k] = p,sum[k] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x % p == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                x /= p;</span><br><span class="line">                sum[k]++;</span><br><span class="line">                tot++;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//tot的阶乘</span></span><br><span class="line">        LL res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= tot;i++) res *= i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//t表示每个质数幂的阶乘</span></span><br><span class="line">            LL t = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= sum[i];j++) t *= j;</span><br><span class="line">            res /= t;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; tot &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="sykblue">线性筛模板</font><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线性筛</span></span><br><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="comment">//记录每个合数的最小质因数</span></span><br><span class="line"><span class="type">int</span> minp[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//质数是它自己</span></span><br><span class="line">            minp[i] = i;</span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;primes[j] * i &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            minp[primes[j] * i] = primes[j];</span><br><span class="line">            <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="聪明的燕姿"><a href="#聪明的燕姿" class="headerlink" title="聪明的燕姿"></a>聪明的燕姿</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1298/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>城市中人们总是拿着号码牌，不停寻找，不断匹配，可是谁也不知道自己等的那个人是谁。</p><p>可是燕姿不一样，燕姿知道自己等的人是谁，因为燕姿数学学得好！</p><p>燕姿发现了一个神奇的算法：假设自己的号码牌上写着数字 S，那么自己等的人手上的号码牌数字的所有正约数之和必定等于 S。</p><p>所以燕姿总是拿着号码牌在地铁和人海找数字（喂！这样真的靠谱吗）。</p><p>可是她忙着唱《绿光》，想拜托你写一个程序能够快速地找到所有自己等的人。</p><p><font color="skyblue">输入格式</font><br>输入包含 k 组数据。</p><p>对于每组数据，输入包含一个号码牌 S。</p><p><font color="skyblue">输出格式</font><br>对于每组数据，输出有两行。</p><p>第一行包含一个整数 m，表示有 m 个等的人。</p><p>第二行包含相应的 m 个数，表示所有等的人的号码牌。</p><p>注意：你输出的号码牌必须按照升序排列。</p><p><font color="skyblue">数据范围</font><br>1 ≤ k ≤ 100,<br>1 ≤ S ≤ 2×10^9</p><p><font color="skyblue">输入样例：</font><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">42</span><br></pre></td></tr></table></figure></p><p><font color="skyblue">输出样例：</font><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">20 26 41</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题的难点在于dfs剪枝和顺序的设计，如果直接dfs的话，第一个超时的点是<code>判断质数</code>，第二个超时点是<code>枚举所有质数</code>。<br>优化判断质数的过程可以用<code>线性筛预处理</code>，根据对约数之和的分析，实际上只需要枚举到<code>根号S</code>即可，这一步就是剪枝。</p><p><font color="skyblue">约数之和</font><br><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E6%95%B0%E8%AE%BA/q3_1.png" alt=""></p><p><font color="skyblue">剪枝证明</font><br><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E6%95%B0%E8%AE%BA/q3_2.png" alt=""><br>图中y总讲解了<code>约数之和</code>如何通过质因数表示，以及为什么只需要枚举到<code>根号S</code>。</p></div><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">50010</span>;</span><br><span class="line"><span class="comment">//线性筛</span></span><br><span class="line"><span class="type">int</span> primes[N],cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">//存答案</span></span><br><span class="line"><span class="type">int</span> ans[N],len;</span><br><span class="line"><span class="comment">//线性筛预处理质因数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;primes[j] * i &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否是质数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; N) <span class="keyword">return</span> !st[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;primes[i] &lt;= x / primes[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合数之和 - dfs所有可能的质因数组合</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> last,<span class="type">int</span> prod,<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//s不是质因数</span></span><br><span class="line">    <span class="keyword">if</span>(s == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[len++] = prod;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理s = (1 + p1) 的 情况</span></span><br><span class="line">    <span class="keyword">if</span>(s - <span class="number">1</span> &gt; (last &lt; <span class="number">0</span> ? <span class="number">1</span> : primes[last]) &amp;&amp; <span class="built_in">is_prime</span>(s - <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ans[len++] = prod * (s - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//顺序枚举</span></span><br><span class="line">    <span class="comment">//枚举到根号s是剪枝</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = last + <span class="number">1</span>;primes[i] &lt;= s / primes[i];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p = primes[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span> + p,t = p;j &lt;= s;t *= p,j += t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s % j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(i,prod * t,s / j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">get_primes</span>(N - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">-1</span>,<span class="number">1</span>,n);</span><br><span class="line">        cout &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span>(len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sort</span>(ans,ans + len);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;i++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五指山"><a href="#五指山" class="headerlink" title="五指山"></a>五指山</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1301/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>大圣在佛祖的手掌中。</p><p>我们假设佛祖的手掌是一个圆圈，圆圈的长为 n，逆时针记为：0,1,2,…,n−1，而大圣每次飞的距离为 d。</p><p>现在大圣所在的位置记为 x，而大圣想去的地方在 y。</p><p>要你告诉大圣至少要飞多少次才能到达目的地。</p><p>注意：孙悟空的筋斗云只沿着逆时针方向翻。</p><p><font color="skyblue">输入格式</font><br>有多组测试数据。</p><p>第一行是一个正整数 T，表示测试数据的组数；</p><p>每组测试数据包括一行，四个非负整数，分别为如来手掌圆圈的长度 n，筋斗所能飞的距离 d，大圣的初始位置 x 和大圣想去的地方 y。</p><p><font color="skyblue">输出格式</font><br>对于每组测试数据，输出一行，给出大圣最少要翻多少个筋斗云才能到达目的地。</p><p>如果无论翻多少个筋斗云也不能到达，输出 Impossible。</p><p><font color="skyblue">数据范围</font><br>1 ≤ T ≤ 5,<br>2 &lt; n &lt; 10^9,<br>0 &lt; d &lt; n,<br>0 ≤ x,y &lt; n</p><p><font color="skyblue">输入样例：</font><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 2 0 2</span><br><span class="line">3 2 0 1</span><br></pre></td></tr></table></figure></p><p><font color="skyblue">输出样例：</font><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>将题意转化后我们可以发现，实际上就是<code>解一个线性同余方程</code>，即<code>ad - bn = y - x</code>，其中<code>a</code>和<code>b</code>为系数。<br>所以可以想到用<code>扩展欧几里得算法</code>求解。</p></div><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">LL n,d,x,y;</span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a,LL b,LL &amp; x,LL &amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>,y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    LL d = <span class="built_in">exgcd</span>(b,a % b,y,x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//x + ad = y + bn</span></span><br><span class="line">        <span class="comment">//解线性同余方程：ad - bn = y - x</span></span><br><span class="line">        cin &gt;&gt; n &gt;&gt; d &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        LL a,b;</span><br><span class="line">        LL t = <span class="built_in">exgcd</span>(n,d,a,b);</span><br><span class="line">        <span class="keyword">if</span>((y - x) % t)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            b *= (y - x) / t;</span><br><span class="line">            n /= t;</span><br><span class="line">            cout &lt;&lt; (b % n + n) % n &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="skyblue">扩展欧几里得(exgcd)模板</font><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a,LL b,LL &amp; x,LL &amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>,y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    LL d = <span class="built_in">exgcd</span>(b,a % b,y,x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 组合数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexoの魔改 - 美化系列(一)，装饰和设计你的页面！</title>
      <link href="/2022/12/29/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/12/29/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="note blue simple"><p>本站基于<code>Hexo</code>搭建，用的是 最新的🦋 hexo-theme-butterfly 主题 <code>v4.5.1</code>，如果你是 <code>v4.5.1</code> 之外的版本，可能有些地方会有出入，请留意。</p></div><div class="note blue simple"><p>注意：<br>我的博客根目录路径为 【D:/Hexo/demo】，下文所说的根目录都是此路径，将用<code>[BlogRoot]</code>代替。</p><p>修改站点配置文件<code>_config.yml</code>，路径为<code>[BlogRoot]/_config.yml</code>。</p><p>修改主题配置文件<code>_config.butterfly.yml</code>，路径为<code>[BlogRoot]/_config.butterfly.yml</code>。</p><p>如果目录<code>[BlogRoot]/themes</code>下没有任何文件的，请用Git拉取<code>themes目录</code>，推荐使用gitee。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://gitee.com/immyw/hexo<span class="literal">-theme-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure></p><p><code>diff代码块</code>中的<code>+</code>和<code>-</code>是指应该<code>添加</code>和<code>删去</code>的内容</p></div><h3 id="添加Pixiv日榜"><a href="#添加Pixiv日榜" class="headerlink" title="添加Pixiv日榜"></a>添加Pixiv日榜</h3><details class="folding-tag" cyan><summary> 效果预览 </summary>              <div class='content'>              <p><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/pixiv%E6%97%A5%E6%A6%9C%E9%A2%84%E8%A7%88.png" alt="pixiv日榜"></p>              </div>            </details><details class="folding-tag" yellow><summary> 查看步骤 </summary>              <div class='content'>              <ol><li>在<code>[BlogRoot]/themes/butterfly/layout/includes/widget</code> 文件夹新建<code>card_pixiv.pug</code>文件，文件内容如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-pixiv</span><br><span class="line"> .card-content</span><br><span class="line">  .item-headline</span><br><span class="line">    i.fa.fa-image(aria-hidden=&quot;true&quot;)</span><br><span class="line">    //- span后为日榜标题，可以自行更改</span><br><span class="line">    span Pixiv日榜Top50</span><br><span class="line">    iframe(src=&quot;https://cloud.mokeyjay.com/pixiv&quot; frameborder=&quot;0&quot;  style=&quot;width:99%;height:380px;margin:0;&quot;)</span><br></pre></td></tr></table></figure><a href="https://cloud.mokeyjay.com/pixiv">https://cloud.mokeyjay.com/pixiv</a> 使用的是<a href="https://www.mokeyjay.com/">超能小紫</a> 提供的服务，也可以自行搭建，搭建方式请看<a href="https://www.mokeyjay.com/archives/1063">这里</a>。</li><li>编辑<code>[BlogRoot]/themes/butterfly/layout/includes/widget/index.pug</code> 文件，找到<code>page</code>部分,在你想要显示的位置插入以下代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//- page</span><br><span class="line">if theme.aside.card_pixiv</span><br><span class="line">    !=partial(&#x27;includes/widget/card_pixiv&#x27;, &#123;&#125;, &#123;cache:true&#125;)</span><br></pre></td></tr></table></figure></li><li>编辑主题配置文件<code>_config.butterfly.yml</code> 搜索aside，在其下面添加如下代码。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aside:</span></span><br><span class="line">  <span class="attr">card_pixiv:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h3 id="公告栏两个小人"><a href="#公告栏两个小人" class="headerlink" title="公告栏两个小人"></a>公告栏两个小人</h3><details class="folding-tag" cyan><summary> 效果预览 </summary>              <div class='content'>              <p><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/%E5%85%AC%E5%91%8A%E6%A0%8F%E5%B0%8F%E4%BA%BA%E9%A2%84%E8%A7%88.png" alt="两个小人"></p>              </div>            </details><details class="folding-tag" yellow><summary> 查看步骤 </summary>              <div class='content'>              <p>在<code>[BlogRoot]/themes/butterfly/layout/includes/widget/card_announcement.pug</code> 下添加如下部分代码。<br>注意: 将代码复制到<code>card_announcement.pug</code>文件以后，不难发现会有重复的一段代码。你要做的一步操作是，<font color="blue">删除重复的代码（优先保留你主题版本原有的代码）</font><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_announcement.enable</span><br><span class="line">  .card-widget.card-announcement</span><br><span class="line">    .item-headline</span><br><span class="line">      i.fas.fa-bullhorn.card-announcement-animation</span><br><span class="line">      span= _p(&#x27;aside.card_announcement&#x27;)</span><br><span class="line">    .announcement_content!= theme.aside.card_announcement.content</span><br><span class="line">  .xpand(style=&#x27;height:200px;&#x27;)</span><br><span class="line">    canvas.illo(width=&#x27;800&#x27; height=&#x27;800&#x27; style=&#x27;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&#x27;)</span><br><span class="line">script(src=&#x27;https://npm.elemecdn.com/ethan4116-blog/lib/js/other/two-people/twopeople1.js&#x27;)</span><br><span class="line">script(src=&#x27;https://npm.elemecdn.com/ethan4116-blog/lib/js/other/two-people/zdog.dist.js&#x27;)</span><br><span class="line">script#rendered-js(src=&#x27;https://npm.elemecdn.com/ethan4116-blog/lib/js/other/two-people/twopeople.js&#x27;)</span><br><span class="line">style.</span><br><span class="line"> .card-widget.card-announcement &#123;</span><br><span class="line"> margin: 0;</span><br><span class="line"> align-items: center;</span><br><span class="line"> justify-content: center;</span><br><span class="line"> text-align: center;</span><br><span class="line"> &#125;</span><br><span class="line"> canvas &#123;</span><br><span class="line"> display: block;</span><br><span class="line"> margin: 0 auto;</span><br><span class="line"> cursor: move;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>              </div>            </details><h3 id="添加白天黑夜切换动画"><a href="#添加白天黑夜切换动画" class="headerlink" title="添加白天黑夜切换动画"></a>添加白天黑夜切换动画</h3><details class="folding-tag" cyan><summary> 效果预览 </summary>              <div class='content'>              <p><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/%E7%99%BD%E5%A4%A9%E9%BB%91%E5%A4%9C%E5%8A%A8%E7%94%BB%E9%A2%84%E8%A7%88.png" alt="白天黑夜"></p>              </div>            </details><details class="folding-tag" yellow><summary> 查看步骤 </summary>              <div class='content'>              <ol><li>在目录<code>[Blogroot]/themes/butterfly/layout/includes/custom</code> 下，新建<code>sun_moon.pug</code>文件，内容如下。(没有<code>custom</code>目录可以新建一个)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">svg(aria-hidden=&#x27;true&#x27;, style=&#x27;position:absolute; overflow:hidden; width:0; height:0&#x27;)</span><br><span class="line">  symbol#icon-sun(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M960 512l-128 128v192h-192l-128 128-128-128H192v-192l-128-128 128-128V192h192l128-128 128 128h192v192z&#x27;, fill=&#x27;#FFD878&#x27;, p-id=&#x27;8420&#x27;)</span><br><span class="line">    path(d=&#x27;M736 512a224 224 0 1 0-448 0 224 224 0 1 0 448 0z&#x27;, fill=&#x27;#FFE4A9&#x27;, p-id=&#x27;8421&#x27;)</span><br><span class="line">    path(d=&#x27;M512 109.248L626.752 224H800v173.248L914.752 512 800 626.752V800h-173.248L512 914.752 397.248 800H224v-173.248L109.248 512 224 397.248V224h173.248L512 109.248M512 64l-128 128H192v192l-128 128 128 128v192h192l128 128 128-128h192v-192l128-128-128-128V192h-192l-128-128z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8422&#x27;)</span><br><span class="line">    path(d=&#x27;M512 320c105.888 0 192 86.112 192 192s-86.112 192-192 192-192-86.112-192-192 86.112-192 192-192m0-32a224 224 0 1 0 0 448 224 224 0 0 0 0-448z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8423&#x27;)</span><br><span class="line">  symbol#icon-moon(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M611.370667 167.082667a445.013333 445.013333 0 0 1-38.4 161.834666 477.824 477.824 0 0 1-244.736 244.394667 445.141333 445.141333 0 0 1-161.109334 38.058667 85.077333 85.077333 0 0 0-65.066666 135.722666A462.08 462.08 0 1 0 747.093333 102.058667a85.077333 85.077333 0 0 0-135.722666 65.024z&#x27;, fill=&#x27;#FFB531&#x27;, p-id=&#x27;11345&#x27;)</span><br><span class="line">    path(d=&#x27;M329.728 274.133333l35.157333-35.157333a21.333333 21.333333 0 1 0-30.165333-30.165333l-35.157333 35.157333-35.114667-35.157333a21.333333 21.333333 0 0 0-30.165333 30.165333l35.114666 35.157333-35.114666 35.157334a21.333333 21.333333 0 1 0 30.165333 30.165333l35.114667-35.157333 35.157333 35.157333a21.333333 21.333333 0 1 0 30.165333-30.165333z&#x27;, fill=&#x27;#030835&#x27;, p-id=&#x27;11346&#x27;)</span><br></pre></td></tr></table></figure></li><li>在目录<code>[Blogroot]/themes/butterfly/source/css/_layout</code> 下，新建<code>sun_moon.styl</code>文件，内容如下。<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Cuteen_DarkSky</span>,</span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span><span class="selector-pseudo">:before</span></span><br><span class="line">  <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">right</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">bottom</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">  <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#feb8b0</span>, <span class="number">#fef9db</span>)</span><br><span class="line">  <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">    <span class="attribute">transition</span> <span class="number">2s</span> ease all</span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#4c3f6d</span>, <span class="number">#6c62bb</span>, <span class="number">#93b1ed</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.DarkMode</span></span><br><span class="line">  <span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">99999999</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">top</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">200%</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">200%</span></span><br><span class="line">  -webkit-<span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">transform-origin</span> center bottom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">left</span> <span class="number">35%</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">40%</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#fefefe</span>, <span class="number">#fffbe8</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span></span><br><span class="line">  <span class="selector-tag">span</span></span><br><span class="line">    <span class="attribute">display</span> none</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menus_item</span></span><br><span class="line">  <span class="selector-tag">a</span></span><br><span class="line">    <span class="attribute">text-decoration</span> none<span class="meta">!important</span></span><br><span class="line"><span class="comment">//按钮相关，对侧栏按钮做过魔改的可以调整这里的数值</span></span><br><span class="line"><span class="selector-class">.icon-V</span></span><br><span class="line">  <span class="attribute">padding</span> <span class="number">5px</span></span><br></pre></td></tr></table></figure></li><li>在目录<code>[Blogroot]/themes/butterfly/source/js</code>下，新建<code>sun_moon.js</code>文件，内容如下。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">switchNightMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">&#x27;&lt;div class=&quot;Cuteen_DarkSky&quot;&gt;&lt;div class=&quot;Cuteen_DarkPlanet&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>),</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;DarkMode&#x27;</span>) ? (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)) : (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)),</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;opacity 3s&#x27;</span>;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="title function_">remove</span>();</span><br><span class="line">          &#125;, <span class="number">1e3</span>);</span><br><span class="line">        &#125;, <span class="number">2e3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">const</span> nowMode = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (nowMode === <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">activateDarkMode</span>()</span><br><span class="line">    saveToLocal.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span> !== <span class="literal">undefined</span> &amp;&amp; btf.<span class="title function_">snackbarShow</span>(<span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">day_to_night</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">activateLightMode</span>()</span><br><span class="line">    saveToLocal.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// handle some cases</span></span><br><span class="line">  <span class="keyword">typeof</span> utterancesTheme === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">utterancesTheme</span>()</span><br><span class="line">  <span class="keyword">typeof</span> <span class="variable constant_">FB</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">loadFBComment</span>()</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">DISQUS</span> &amp;&amp; <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;disqus_thread&#x27;</span>).<span class="property">children</span>.<span class="property">length</span> &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">disqusReset</span>(), <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改<code>[Blogroot]/themes/butterfly/layout/includes</code>目录下的<code>head.pug</code>文件,在文件末位加上一行：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  //- global config</span><br><span class="line">  !=partial(&#x27;includes/head/config&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">  include ./head/config_site.pug</span><br><span class="line">  include ./head/noscript.pug</span><br><span class="line"></span><br><span class="line">  !=fragment_cache(&#x27;injectHeadJs&#x27;, function()&#123;return inject_head_js()&#125;)</span><br><span class="line"></span><br><span class="line">  !=fragment_cache(&#x27;injectHead&#x27;, function()&#123;return injectHtml(theme.inject.head)&#125;)</span><br><span class="line"><span class="addition">+ include ./custom/sun_moon.pug</span></span><br></pre></td></tr></table></figure></li><li>修改<code>[Blogroot]/themes/butterfly/layout/includes</code>目录下的<code>rightside.pug</code>文件,把原本的昼夜切换按钮替换掉。<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  when &#x27;translate&#x27;</span><br><span class="line">    if translate.enable</span><br><span class="line">      button#translateLink(type=&quot;button&quot; title=_p(&#x27;rightside.translate_title&#x27;))= translate.default</span><br><span class="line">  when &#x27;darkmode&#x27;</span><br><span class="line">    if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line"><span class="deletion">-     button#darkmode(type=&quot;button&quot; title=_p(&#x27;rightside.night_mode_title&#x27;))</span></span><br><span class="line"><span class="deletion">-       i.fas.fa-adjust</span></span><br><span class="line"><span class="addition">+     a.icon-V.hidden(onclick=&#x27;switchNightMode()&#x27;,  title=_p(&#x27;rightside.night_mode_title&#x27;))</span></span><br><span class="line"><span class="addition">+       svg(width=&#x27;25&#x27;, height=&#x27;25&#x27;, viewBox=&#x27;0 0 1024 1024&#x27;)</span></span><br><span class="line"><span class="addition">+         use#modeicon(xlink:href=&#x27;#icon-moon&#x27;)</span></span><br></pre></td></tr></table></figure></li><li>修改主题配置文件<code>_config.butterfly.yml</code>,引入一下js。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/sun_moon.js&quot;</span> <span class="string">async&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol>              </div>            </details><h3 id="背景切换"><a href="#背景切换" class="headerlink" title="背景切换"></a>背景切换</h3><h3 id="主题面板"><a href="#主题面板" class="headerlink" title="主题面板"></a>主题面板</h3><h3 id="鼠标右键菜单"><a href="#鼠标右键菜单" class="headerlink" title="鼠标右键菜单"></a>鼠标右键菜单</h3><h3 id="文章置顶滚动栏"><a href="#文章置顶滚动栏" class="headerlink" title="文章置顶滚动栏"></a>文章置顶滚动栏</h3><h3 id="首页分类磁贴"><a href="#首页分类磁贴" class="headerlink" title="首页分类磁贴"></a>首页分类磁贴</h3><h3 id="文章双侧栏显示"><a href="#文章双侧栏显示" class="headerlink" title="文章双侧栏显示"></a>文章双侧栏显示</h3><h3 id="wowjs动画"><a href="#wowjs动画" class="headerlink" title="wowjs动画"></a>wowjs动画</h3><h3 id="个人卡片渐变色"><a href="#个人卡片渐变色" class="headerlink" title="个人卡片渐变色"></a>个人卡片渐变色</h3><h3 id="自定义字体"><a href="#自定义字体" class="headerlink" title="自定义字体"></a>自定义字体</h3><h3 id="黑夜霓虹灯"><a href="#黑夜霓虹灯" class="headerlink" title="黑夜霓虹灯"></a>黑夜霓虹灯</h3><h3 id="星空背景和流星特效"><a href="#星空背景和流星特效" class="headerlink" title="星空背景和流星特效"></a>星空背景和流星特效</h3>]]></content>
      
      
      <categories>
          
          <category> Hexoの魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需要熟稔于心的考研数学公式</title>
      <link href="/2022/12/29/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2022/12/29/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="泰勒公式-求极限"><a href="#泰勒公式-求极限" class="headerlink" title="泰勒公式(求极限)"></a>泰勒公式(求极限)</h3><p><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F.png" alt=""></p><h3 id="基本求导公式"><a href="#基本求导公式" class="headerlink" title="基本求导公式"></a>基本求导公式</h3><div class="fj-gallery"><p><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E5%9F%BA%E6%9C%AC%E6%B1%82%E5%AF%BC%E5%85%AC%E5%BC%8F1.png" alt=""><br><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E5%9F%BA%E6%9C%AC%E6%B1%82%E5%AF%BC%E5%85%AC%E5%BC%8F2.png" alt=""></p>          </div><h3 id="基本积分公式"><a href="#基本积分公式" class="headerlink" title="基本积分公式"></a>基本积分公式</h3><div class="fj-gallery"><p><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E5%9F%BA%E6%9C%AC%E7%A7%AF%E5%88%86%E5%85%AC%E5%BC%8F1.png" alt=""><br><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E5%9F%BA%E6%9C%AC%E7%A7%AF%E5%88%86%E5%85%AC%E5%BC%8F2.png" alt=""><br><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E5%9F%BA%E6%9C%AC%E7%A7%AF%E5%88%86%E5%85%AC%E5%BC%8F3.png" alt=""><br><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E5%9F%BA%E6%9C%AC%E7%A7%AF%E5%88%86%E5%85%AC%E5%BC%8F4.png" alt=""></p>          </div><h3 id="华里士公式"><a href="#华里士公式" class="headerlink" title="华里士公式"></a>华里士公式</h3><h4 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h4><p><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E5%8D%8E%E9%87%8C%E5%A3%AB%E5%85%AC%E5%BC%8F1.png" alt=""></p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E5%8D%8E%E9%87%8C%E5%A3%AB%E5%85%AC%E5%BC%8F2.png" alt=""></p><h3 id="重要展开式"><a href="#重要展开式" class="headerlink" title="重要展开式"></a>重要展开式</h3><div class="fj-gallery"><p><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E9%87%8D%E8%A6%81%E5%B1%95%E5%BC%80%E5%BC%8F1.png" alt=""><br><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E9%87%8D%E8%A6%81%E5%B1%95%E5%BC%80%E5%BC%8F2.png" alt=""><br><img src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E9%9C%80%E8%A6%81%E7%86%9F%E7%A8%94%E4%BA%8E%E5%BF%83%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/%E9%87%8D%E8%A6%81%E5%B1%95%E5%BC%80%E5%BC%8F3.png" alt=""></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 考研数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假每日一题 &amp; 贪心(习题课)</title>
      <link href="/2022/12/28/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20&amp;%20%E8%B4%AA%E5%BF%83(%E4%B9%A0%E9%A2%98%E8%AF%BE)/"/>
      <url>/2022/12/28/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20&amp;%20%E8%B4%AA%E5%BF%83(%E4%B9%A0%E9%A2%98%E8%AF%BE)/</url>
      
        <content type="html"><![CDATA[<h3 id="上课睡觉"><a href="#上课睡觉" class="headerlink" title="上课睡觉"></a>上课睡觉</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/description/4369/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>有 N 堆石子，每堆的石子数量分别为 a1,a2,…,aN。</p><p>你可以对石子堆进行合并操作，将两个相邻的石子堆合并为一个石子堆，例如，如果 a=[1,2,3,4,5]，合并第 2,3 堆石子，则石子堆集合变为 a=[1,5,4,5]。</p><p>我们希望通过尽可能少的操作，使得石子堆集合中的每堆石子的数量都相同。</p><p>请你输出所需的最少操作次数。</p><p>本题一定有解，因为可以将所有石子堆合并为一堆。</p><p><strong>输入格式</strong><br>第一行包含整数 T，表示共有 T 组测试数据。</p><p>每组数据第一行包含整数 N。</p><p>第二行包含 N 个整数 a1,a2,…,aN。</p><p><strong>输出格式</strong><br>每组数据输出一行结果。</p><p><strong>数据范围</strong><br>1 ≤ T ≤ 10,<br>1 ≤ N ≤ 10^5,<br>0 ≤ ai ≤ 10^6,<br>ai求和 ≤ 106,<br>每个输入所有 N 之和不超过 10^5。</p><p><strong>输入样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">6</span><br><span class="line">1 2 3 1 1 1</span><br><span class="line">3</span><br><span class="line">2 2 3</span><br><span class="line">5</span><br><span class="line">0 0 0 0 0</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><p><strong>样例解释</strong><br>第一组数据，只需要用 3 个操作来完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   1 2 3 1 1 1</span><br><span class="line">-&gt; 3 3 1 1 1</span><br><span class="line">-&gt; 3 3 2 1</span><br><span class="line">-&gt; 3 3 3</span><br></pre></td></tr></table></figure><p>第二组数据，只需要用 2 个操作来完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   2 2 3</span><br><span class="line">-&gt; 2 5</span><br><span class="line">-&gt; 7</span><br></pre></td></tr></table></figure><p>第三组数据，我们什么都不需要做。</p></div><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题有两个未知信息，一个是<code>每堆石子数量</code>和<code>合并次数</code>，我们不妨设它们为<code>x</code>和<code>y</code>，于是我们可以得到等式<code>x * (n - y) = 石子总数</code>，我们会发现<code>x</code>和<code>y</code>是<code>成正比</code>的，故<u>找到最小的合并次数，可以转化为找到最小的每堆石子数量</u>，为此我们枚举每堆石子的数量即可。</p></div><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">LL sum,maxv;</span><br><span class="line"><span class="comment">//能否分成每堆t个</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(LL t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cur += a[i];</span><br><span class="line">        <span class="keyword">if</span>(cur == t) cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cur &gt; t) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">0</span>,maxv = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            sum += a[i];</span><br><span class="line">            maxv = <span class="built_in">max</span>(maxv,a[i] * <span class="number">1ll</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxv == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//已经分好了</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;0&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(LL i = maxv;i &lt;= sum;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum % i == <span class="number">0</span> &amp;&amp; <span class="built_in">check</span>(i))</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; n - (sum / i) &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="付账问题"><a href="#付账问题" class="headerlink" title="付账问题"></a>付账问题</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1237/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>几个人一起出去吃饭是常有的事。</p><p>但在结帐的时候，常常会出现一些争执。</p><p>现在有 n 个人出去吃饭，他们总共消费了 S 元。</p><p>其中第 i 个人带了 ai 元。</p><p>幸运的是，所有人带的钱的总数是足够付账的，但现在问题来了：每个人分别要出多少钱呢？</p><p>为了公平起见，我们希望在总付钱量恰好为 S 的前提下，最后每个人付的钱的标准差最小。</p><p>这里我们约定，每个人支付的钱数可以是任意非负实数，即可以不是 1 分钱的整数倍。</p><p>你需要输出最小的标准差是多少。</p><p>标准差的介绍：标准差是多个数与它们平均数差值的平方平均数，一般用于刻画这些数之间的“偏差有多大”。</p><p>形式化地说，设第 i 个人付的钱为 bi 元，那么标准差为 :</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20%26%20%E8%B4%AA%E5%BF%83%28%E4%B9%A0%E9%A2%98%E8%AF%BE%29/bzc.png"/></div></div><p><strong>输入格式</strong><br>第一行包含两个整数 n、S；</p><p>第二行包含 n 个非负整数 a1, …, an。</p><p><strong>输出格式</strong><br>输出最小的标准差，四舍五入保留 4 位小数。</p><p><strong>数据范围</strong><br>1 ≤ n ≤ 5×10^5,<br>0≤ ai ≤ 10^9,<br>0≤ S ≤ 10^15。</p><p><strong>输入样例1：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2333</span><br><span class="line">666 666 666 666 666</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.0000</span><br></pre></td></tr></table></figure></p><p><strong>输入样例2：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 30</span><br><span class="line">2 1 4 7 4 8 3 6 4 7</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.7928</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题要求标准差最小，并且给出了公式。我们直接从公式出发即可，题意中均值就是<code>(所付金额 / 总人数)</code>，再将标准差具体化即可。</p><p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20%26%20%E8%B4%AA%E5%BF%83%28%E4%B9%A0%E9%A2%98%E8%AF%BE%29/q1.png"/></div>&lt;/div&gt;<br>根据<code>均值不等式</code>我们可以发现，当每个人<code>所持金额</code>大于<code>S / n</code>时，取<code>S / n</code>时能够让<code>均值不等式取等</code>，即使得标准差最小。但这是一道实际问题，有些人的<code>所持金额</code>可能不足<code>S / n</code>，<u>此时就不满足均值不等式取等条件了</u>。那么我们不妨将这部分人分开考虑，让这部分人付<code>所有所持金额</code>,<u>不足部分让满足条件的人来分摊</u>。假定这部分人总的不足部分为<code>T</code>,相当于让满足条件的人在<code>需付金额 = S - T</code>的条件下用<code>均值不等式</code>。<br>然后我们<code>排序</code>处理，对这两部分人分别处理，就不难写出以下代码了。</p></div><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">double</span> LD;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">LD S;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; S;</span><br><span class="line">    <span class="comment">//决策：让所有b取S / n，即均值不等式取等条件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="comment">//让a分为两段，前半段取不到S / n，取a为最小。后半段用均值不等式。</span></span><br><span class="line">    <span class="built_in">sort</span>(a,a + n);</span><br><span class="line">    LD res = <span class="number">0</span>,avg = S / n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//满足条件的这部分人，所付金额为(S - T) / n</span></span><br><span class="line">        LD cur = S / (n - i);</span><br><span class="line">        <span class="comment">//所付金额不够 S / n，付出全部</span></span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; cur) cur = a[i];</span><br><span class="line">        res += (cur - avg) * (cur - avg);</span><br><span class="line">        <span class="comment">//分摊所付金额不够这部分人的钱</span></span><br><span class="line">        S -= cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4Lf\n&quot;</span>,<span class="built_in">sqrt</span>(res / n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="乘积最大"><a href="#乘积最大" class="headerlink" title="乘积最大"></a>乘积最大</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1241/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>给定 N 个整数 A1,A2,…AN。</p><p>请你从中选出 K 个数，使其乘积最大。</p><p>请你求出最大的乘积，由于乘积可能超出整型范围，你只需输出乘积除以 1000000009 的余数。</p><p>注意，如果 X&lt;0， 我们定义 X 除以 1000000009 的余数是负(−X)除以 1000000009 的余数，即：0−((0−x)%1000000009)</p><p><strong>输入格式</strong><br>第一行包含两个整数 N 和 K。</p><p>以下 N 行每行一个整数 Ai。</p><p><strong>输出格式</strong><br>输出一个整数，表示答案。</p><p><strong>数据范围</strong><br>1 ≤ K ≤ N ≤ 10^5,<br>−10^5 ≤ Ai ≤ 10^5</p><p><strong>输入样例1：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">-100000</span><br><span class="line">-10000</span><br><span class="line">2</span><br><span class="line">100000</span><br><span class="line">10000</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">999100009</span><br></pre></td></tr></table></figure></p><p><strong>输入样例2：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">-100000</span><br><span class="line">-100000</span><br><span class="line">-2</span><br><span class="line">-100000</span><br><span class="line">-100000</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-999999829</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题的<code>贪心策略</code>并不复杂，主要是能否找到一种较为好写的分类方式。</p><p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20%26%20%E8%B4%AA%E5%BF%83%28%E4%B9%A0%E9%A2%98%E8%AF%BE%29/q2.png"/></div>&lt;/div&gt;<br>根据图中的方式分类，我们甚至可以将<code>k为奇数</code>转化为偶数时的情况，只需要先取一个最大的数即可。<br><code>k为偶数</code>的策略为：<u>负数成对取，且从左侧取；正数从右侧取</u>，类似一个<code>归并排序的过程</code>。</p></div><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>,mod = <span class="number">1000000009</span>;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a,a + n);</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>,r = n - <span class="number">1</span>,sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k % <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//k为奇数,先取最右侧的数,之后转化为k-1偶数的问题</span></span><br><span class="line">        res = a[r--];</span><br><span class="line">        k--;</span><br><span class="line">        <span class="comment">//如果所有数均为负数,取数规则相反</span></span><br><span class="line">        <span class="keyword">if</span>(res &lt; <span class="number">0</span>) sign = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        LL lv = (LL)a[l] * a[l + <span class="number">1</span>],rv = (LL)a[r] * a[r - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(lv * sign &gt; rv * sign)</span><br><span class="line">        &#123;</span><br><span class="line">            res = lv % mod * res % mod;</span><br><span class="line">            l += <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            res = rv % mod * res % mod;</span><br><span class="line">            r -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        k -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1249/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>给定 N 个加号、M 个减号以及 N+M+1 个整数 A1,A2,⋅⋅⋅,AN+M+1，小明想知道在所有由这 N 个加号、M 个减号以及 N+M+1 个整数凑出的合法的后缀表达式中，结果最大的是哪一个？</p><p>请你输出这个最大的结果。</p><p>例如使用 123+−，则 “23+1−” 这个后缀表达式结果是 4，是最大的。</p><p><strong>输入格式</strong><br>第一行包含两个整数 N 和 M。</p><p>第二行包含 N+M+1 个整数 A1,A2,⋅⋅⋅,AN+M+1。</p><p><strong>输出格式</strong><br>输出一个整数，代表答案。</p><p><strong>数据范围</strong><br>0 ≤ N,M ≤ 10^5,<br>−10^9 ≤ Ai ≤ 10^9</p><p><strong>输入样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题的看似策略十分简单，<u>尽可能加上正数，减去负数</u>。实际上减号不止可以凑出<code>m</code>个，因为<code>后缀表达式</code>指定数运算顺序相当于<code>中缀表达式</code>加括号，如果能想到<code>m ≠ 0</code>时，能够凑出<code>1 ~ n + m</code>任意个减号，相当于所有数都可以尽可能取正，这题就迎刃而解了。</p></div><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n + m + <span class="number">1</span>;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a,a + n + m + <span class="number">1</span>);</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果没有负号，就是全部想加</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n + m + <span class="number">1</span>;i++) res += a[i];</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果存在负号，则可以最多可以凑出1~(n+m)个负号</span></span><br><span class="line">        res = a[n + m] - a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n + m;i++) res += <span class="built_in">abs</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="灵能传输"><a href="#灵能传输" class="headerlink" title="灵能传输"></a>灵能传输</h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1249/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>在游戏《星际争霸 II》中，高阶圣堂武士作为星灵的重要 AOE 单位，在游戏的中后期发挥着重要的作用，其技能”灵能风暴“可以消耗大量的灵能对一片区域内的敌军造成毁灭性的伤害。</p><p>经常用于对抗人类的生化部队和虫族的刺蛇飞龙等低血量单位。</p><p>你控制着 n 名高阶圣堂武士，方便起见标为 1,2,⋅⋅⋅,n。</p><p>每名高阶圣堂武士需要一定的灵能来战斗，每个人有一个灵能值 ai 表示其拥有的灵能的多少（ai 非负表示这名高阶圣堂武士比在最佳状态下多余了 ai 点灵能，ai 为负则表示这名高阶圣堂武士还需要 −ai 点灵能才能到达最佳战斗状态）。</p><p>现在系统赋予了你的高阶圣堂武士一个能力，传递灵能，每次你可以选择一个 i∈[2,n−1]，若 ai≥0 则其两旁的高阶圣堂武士，也就是 i−1、i+1 这两名高阶圣堂武士会从 i 这名高阶圣堂武士这里各抽取 ai 点灵能；若 ai&lt;0 则其两旁的高阶圣堂武士，也就是 i−1,i+1 这两名高阶圣堂武士会给 i 这名高阶圣堂武士 −ai 点灵能。</p><p>形式化来讲就是 ai−1+=ai,ai+1+=ai,ai−=2ai。</p><p>灵能是非常高效的作战工具，同时也非常危险且不稳定，一位高阶圣堂武士拥有的灵能过多或者过少都不好，定义一组高阶圣堂武士的不稳定度为 maxni=1|ai|，请你通过不限次数的传递灵能操作使得你控制的这一组高阶圣堂武士的不稳定度最小。</p><p><strong>输入格式</strong><br>本题包含多组询问。输入的第一行包含一个正整数 T 表示询问组数。</p><p>接下来依次输入每一组询问。</p><p>每组询问的第一行包含一个正整数 n，表示高阶圣堂武士的数量。</p><p>接下来一行包含 n 个数 a1,a2,⋅⋅⋅,an。</p><p><strong>输出格式</strong><br>输出 T 行。</p><p>每行一个整数依次表示每组询问的答案。</p><p><strong>数据范围</strong><br>1 ≤ T ≤ 3,3≤ n ≤ 300000,|ai|≤ 10^9,<br>每个评测用例的限制如下：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20%26%20%E8%B4%AA%E5%BF%83%28%E4%B9%A0%E9%A2%98%E8%AF%BE%29/constraint.png"/></div></div><p><strong>输入样例1：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">5 -2 3</span><br><span class="line">4</span><br><span class="line">0 0 0 0</span><br><span class="line">3</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p><strong>输入样例2：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br><span class="line">-1 -2 -3 7</span><br><span class="line">4</span><br><span class="line">2 3 4 -8</span><br><span class="line">5</span><br><span class="line">-1 -1 6 -1 -1</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">4</span><br></pre></td></tr></table></figure><br><strong>样例解释</strong><br>样例一<br>对于第一组询问：<br>对 2 号高阶圣堂武士进行传输操作后 a1=3，a2=2，a3=1。答案为 3。<br>对于第二组询问：<br>这一组高阶圣堂武士拥有的灵能都正好可以让他们达到最佳战斗状态。</p></div><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题思维很具有跳跃性，很难想到。需要把题目中的<code>灵能传输过程</code>转化为<code>前缀和</code>来考虑，<code>灵能传输</code>相当于交换前缀和的<code>Si-1和Si</code>，而答案要求<code>Si - Si-1</code>尽可能的小，在图上表示就是要求<code>S0</code>到<code>Sn</code>的图像尽可能平滑。</p><p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20%26%20%E8%B4%AA%E5%BF%83%28%E4%B9%A0%E9%A2%98%E8%AF%BE%29/q4.png"/></div>&lt;/div&gt;<br>那么只有将<code>S数组排序</code>，才能使得图像尽可能平滑。那么如何让排序后,<code>S0</code>到<code>Sn</code>这个过程尽可能少跨度呢?，这里的<code>贪心策略</code>是：<u>让<code>S0</code>先跳到<code>前缀和最小值</code>，再跳到<code>前缀和最大值</code>，最后跳到<code>Sn</code>，其中需要<code>隔一格跳一次</code>。</u><br><code>隔一格跳一次</code>应该是这题贪心的精髓部分，由于我们跳的过程中，必然会有回跳的过程，相比相邻跳，隔一格跳能使回跳时候的<code>Si - Si-1</code>差值不会太大。<br>在<code>前缀和的基础上再结合贪心</code>，才有了以下代码，可见<code>这题的难度非常高</code>。</p></div><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line">LL a[N],s[N];</span><br><span class="line"><span class="comment">//标记是否走过</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        LL s0 = s[<span class="number">0</span>],sn = s[n];</span><br><span class="line">        <span class="keyword">if</span>(s0 &gt; sn) <span class="built_in">swap</span>(s0,sn);</span><br><span class="line">        <span class="comment">//灵能传输相当于交换前缀和si-1和si，这一步非常关键</span></span><br><span class="line">        <span class="built_in">sort</span>(s,s + n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == s0)</span><br><span class="line">            &#123;</span><br><span class="line">                s0 = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == sn)</span><br><span class="line">            &#123;</span><br><span class="line">                sn = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="comment">//排序后从s0跳到sn,使得路线尽可能平滑</span></span><br><span class="line">        <span class="comment">//这里每隔一个跳，为了方便跳回来</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = n;</span><br><span class="line">        <span class="comment">//从s0跳到最小值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = s0;i &gt;= <span class="number">0</span>;i -= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[l++] = s[i];</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从最大值跳到sn</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = sn;i &lt;= n;i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[r--] = s[i];</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从最小值跳回最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[i]) a[l++] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        LL res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) res = <span class="built_in">max</span>(res,<span class="built_in">abs</span>(a[i] - a[i - <span class="number">1</span>]));</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 枚举 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing蓝桥杯辅导课之贪心</title>
      <link href="/2022/12/27/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E8%B4%AA%E5%BF%83/"/>
      <url>/2022/12/27/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h3 id="股票买卖"><a href="#股票买卖" class="headerlink" title="股票买卖"></a>股票买卖</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1057/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>给定一个长度为 N 的数组，数组中的第 i 个数字表示一个给定股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>输入格式</strong><br>第一行包含整数 N，表示数组长度。</p><p>第二行包含 N 个不大于 10000 的正整数，表示完整的数组。</p><p><strong>输出格式</strong><br>输出一个整数，表示最大利润。</p><p><strong>数据范围</strong><br>1 ≤ N ≤ 105</p><p><strong>输入样例1：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">7 1 5 3 6 4</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure></p><p><strong>输入样例2：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></p><p><strong>输入样例3：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">7 6 4 3 1</span><br></pre></td></tr></table></figure></p><p><strong>输出样例3：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure></p><p><strong>样例解释</strong><br>样例1：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。共得利润 4+3 = 7。</p><p>样例2：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p><p>样例3：在这种情况下, 不进行任何交易, 所以最大利润为 0。</p></div><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这是一道很经典的贪心题，从实际含义出发考虑，如果要得到最大利润，我们可假设一种决策，<code>只要有涨就卖</code>。<u>那么这种决策能否得到最优解呢？</u>我们根据题目的限制可以发现，<code>每个很大跨度的股票买卖</code>都可以拆成<code>若干个相邻跨度的股票买卖</code>，那么如果我们在<code>相邻的股票买卖做到有涨就卖</code>，那么必然可以实现从第一天到最后一天的最大利润。</p></div><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i + <span class="number">1</span> &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> d = a[i + <span class="number">1</span>]  - a[i];</span><br><span class="line">        <span class="keyword">if</span>(d &gt; <span class="number">0</span>) res += d;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="货仓选址"><a href="#货仓选址" class="headerlink" title="货仓选址"></a>货仓选址</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/106/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>在一条数轴上有 N 家商店，它们的坐标分别为 A1∼AN。</p><p>现在需要在数轴上建立一家货仓，每天清晨，从货仓到每家商店都要运送一车商品。</p><p>为了提高效率，求把货仓建在何处，可以使得货仓到每家商店的距离之和最小。</p><p><strong>输入格式</strong><br>第一行输入整数 N。</p><p>第二行 N 个整数 A1∼AN。</p><p><strong>输出格式</strong><br>输出一个整数，表示距离之和的最小值。</p><p><strong>数据范围</strong><br>1 ≤ N ≤ 100000,<br>0 ≤ Ai ≤ 40000</p><p><strong>输入样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">6 2 9 1</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题乍一看，直觉上可能认为<code>放在中间应该是最优的</code>。实际上确实如此，那么我们<u>如何证明放中间能使距离之和最小呢？</u>，我们<code>将题意转化为数学公式即可</code>。</p><p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E8%B4%AA%E5%BF%83/q2.png"/></div>&lt;/div&gt;<br>由此证明，我们不难写出以下代码。</p></div><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="built_in">sort</span>(a,a + n);</span><br><span class="line">    <span class="comment">//选址位置为中位数</span></span><br><span class="line">    <span class="type">int</span> c = a[n / <span class="number">2</span>];</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) res += <span class="built_in">abs</span>(a[i] - c);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="糖果传递"><a href="#糖果传递" class="headerlink" title="糖果传递"></a>糖果传递</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/124/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>有 n 个小朋友坐成一圈，每人有 a[i] 个糖果。</p><p>每人只能给左右两人传递糖果。</p><p>每人每次传递一个糖果代价为 1。</p><p>求使所有人获得均等糖果的最小代价。</p><p><strong>输入格式</strong><br>第一行输入一个正整数 n，表示小朋友的个数。</p><p>接下来 n 行，每行一个整数 a[i]，表示第 i 个小朋友初始得到的糖果的颗数。</p><p><strong>输出格式</strong><br>输出一个整数，表示最小代价。</p><p><strong>数据范围</strong><br>1 ≤ n ≤ 1000000,<br>0 ≤ a[i] ≤ 2×10^9,<br>数据保证一定有解。</p><p><strong>输入样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">4</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这道题如果直接想的话很难下手，<code>从公式出发</code>会比较好理解一些。为此我们先<code>把题意抽象成公式</code>。</p><p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E8%B4%AA%E5%BF%83/q3.png"/></div>&lt;/div&gt;<br>从公式出发，我们发现可以转化成上一题的思路进行求解。<br>为此，我们不难得出以下代码。</p></div><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">//c[i]表示每行方程中的整体常数</span></span><br><span class="line"><span class="type">int</span> a[N],c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) cin &gt;&gt; a[i],sum += a[i];</span><br><span class="line">    <span class="comment">//c[i - 1] = c[i] + avg - a[i - 1] </span></span><br><span class="line">    LL avg = sum / n;</span><br><span class="line">    <span class="comment">//递推求c数组</span></span><br><span class="line">    c[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++) c[i] = c[i - <span class="number">1</span>] - avg + a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//对c数组执行一遍上题的逻辑</span></span><br><span class="line">    <span class="built_in">sort</span>(c + <span class="number">1</span>,c + <span class="number">1</span> + n);</span><br><span class="line">    LL res = <span class="number">0</span>,mid = c[(n + <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) res += <span class="built_in">abs</span>(c[i] - mid);</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="雷达设备"><a href="#雷达设备" class="headerlink" title="雷达设备"></a>雷达设备</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/114/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>假设海岸是一条无限长的直线，陆地位于海岸的一侧，海洋位于另外一侧。</p><p>每个小岛都位于海洋一侧的某个点上。</p><p>雷达装置均位于海岸线上，且雷达的监测范围为 d，当小岛与某雷达的距离不超过 d 时，该小岛可以被雷达覆盖。</p><p>我们使用笛卡尔坐标系，定义海岸线为 x 轴，海的一侧在 x 轴上方，陆地一侧在 x 轴下方。</p><p>现在给出每个小岛的具体坐标以及雷达的检测范围，请你求出能够使所有小岛都被雷达覆盖所需的最小雷达数目。</p><p><strong>输入格式</strong><br>第一行输入两个整数 n 和 d，分别代表小岛数目和雷达检测范围。</p><p>接下来 n 行，每行输入两个整数，分别代表小岛的 x，y 轴坐标。</p><p>同一行数据之间用空格隔开。</p><p><strong>输出格式</strong><br>输出一个整数，代表所需的最小雷达数目，若没有解决方案则所需数目输出 −1。</p><p><strong>数据范围</strong><br>1 ≤ n ≤ 1000,<br>−1000 ≤ x,y ≤ 1000</p><p><strong>输入样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">-3 1</span><br><span class="line">2 1</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题如果<code>从雷达的角度去考虑</code>，会涉及圆周问题，<code>比较复杂</code>。我们不妨<code>从每个小岛的角度去考虑</code>，看下雷达在哪个范围能够检测到小岛，这样就<code>转化成了区间的问题</code>。<u>对于多个雷达可放置的区间，我们如何找到最小覆盖次数呢？</u>，一般会先想到<code>尽量找覆盖最多的区间</code>，这也就是本题的思路。<br>为此，我们不难写出以下代码。</p></div><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> l,r;</span><br><span class="line">    <span class="comment">//根据区间右端点排序</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Seg &amp; s) <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> r &lt; s.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;segs[N];</span><br><span class="line"><span class="type">int</span> n,d;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(y &gt; d)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//没有解决方案</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> dif = <span class="built_in">sqrt</span>(d * d - y * y);</span><br><span class="line">        segs[i] = &#123;x - dif,x + dif&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对右端点排序</span></span><br><span class="line">    <span class="built_in">sort</span>(segs,segs + n);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> last = <span class="number">-1e18</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当前区间最右边已经不能覆盖之后的区间了</span></span><br><span class="line">        <span class="keyword">if</span>(last &lt; segs[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//增加一个雷达</span></span><br><span class="line">            res++;</span><br><span class="line">            <span class="comment">//扩展当前区间</span></span><br><span class="line">            last = segs[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给你的页面内嵌B站追番列表，二次元必入!</title>
      <link href="/2022/12/27/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E8%BF%BD%E7%95%AA%E5%88%97%E8%A1%A8/"/>
      <url>/2022/12/27/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E8%BF%BD%E7%95%AA%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="安装bangumi插件"><a href="#安装bangumi插件" class="headerlink" title="安装bangumi插件"></a>安装bangumi插件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-bilibili-bangumi</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><strong>将下面的简化配置信息写入_config.yml中，并非主题配置文件。</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 番剧列表</span></span><br><span class="line"><span class="attr">bangumi:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">vmid:</span> <span class="number">11865683</span> <span class="comment">#B站的UID</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">追番列表</span> <span class="comment">#番剧页面的标题</span></span><br><span class="line">  <span class="attr">quote:</span> <span class="string">生命不息，追番不止！</span></span><br><span class="line">  <span class="attr">show:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">loading:</span> <span class="string">https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/cover/bochi-head.gif</span> <span class="comment">#加载时的图片,我这里用的是波奇酱的甩头(偷笑)</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>配置属性</th><th>含义</th></tr></thead><tbody><tr><td>enable</td><td>是否启用</td></tr><tr><td>vmid</td><td>B站的UID</td></tr><tr><td>title</td><td>番剧页面的标题</td></tr><tr><td>quote</td><td>写在页面内容开头的一段话，支持 html 语法</td></tr><tr><td>show</td><td>初始显示页面：0: 想看 , 1: 在看 , 2: 看过，默认为 1</td></tr><tr><td>loading</td><td>图片加载完成前的 loading 图片</td></tr></tbody></table></div><div class="note simple"><p>更详细的配置属性可查看作者的教程，<a href="https://github.com/HCLonely/hexo-bilibili-bangumi">Bangumi插件</a>。<br>B站UID获取请进入<a href="https://space.bilibili.com/">个人主页</a>，网站最后一串数字就是UID。</p></div><h3 id="创建bangumi页面并配置"><a href="#创建bangumi页面并配置" class="headerlink" title="创建bangumi页面并配置"></a>创建bangumi页面并配置</h3><p><strong>在Hexo项目的根目录下进入控制台，创建bangumis页面。</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page bangumis</span><br></pre></td></tr></table></figure></p><p><strong>在bangumis页面的index.md文件中，标注type为bangumis</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">---</span></span><br><span class="line">title: bangumis</span><br><span class="line">date: <span class="number">2022</span><span class="literal">-12-27</span> <span class="number">14</span>:<span class="number">48</span>:<span class="number">48</span></span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;bangumis&quot;</span></span><br><span class="line"><span class="literal">---</span></span><br></pre></td></tr></table></figure></p><p><strong>并且在主题配置文件_config.butterfly.yml中加入bangumis页面的路由配置</strong><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="string">番剧:</span> <span class="string">/bangumis/</span> <span class="string">||</span> <span class="string">fa-brands</span> <span class="string">fa-youtube</span></span><br></pre></td></tr></table></figure></p><h3 id="加载番剧数据"><a href="#加载番剧数据" class="headerlink" title="加载番剧数据"></a>加载番剧数据</h3><p><strong>在运行或部署前，最好先加载一次番剧的数据。这里有两个注意点：<mark class="hl-label pink">B站需要公开追番</mark>  和 <mark class="hl-label orange">记得开梯子</mark> (<u>因为bangumi官网在国外，可能出现加载数据失败的情况</u>)。</strong><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo bangumi <span class="literal">-u</span> &amp;&amp; hexo clean &amp;&amp; hexo g <span class="literal">-d</span></span><br></pre></td></tr></table></figure></p><p><strong>最后运行项目，查看bangumis页面是否有追番列表。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%BF%BD%E7%95%AA%E5%88%97%E8%A1%A8/result.png"/></div></div></p>]]></content>
      
      
      <categories>
          
          <category> Hexoの魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker最详细的实战教程</title>
      <link href="/2022/12/27/Docker%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"/>
      <url>/2022/12/27/Docker%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="tip info"><p><strong>这篇笔记也是本人在学习Docker时经常翻阅的内容，写的非常完整详细，如今在此补上。如还有不清楚的内容，可参考周阳老师的<a href="https://www.bilibili.com/video/BV1gr4y1U7CY/?spm_id_from=333.999.0.0">Docker教程</a></strong></p></div><h3 id="笔记正文"><a href="#笔记正文" class="headerlink" title="笔记正文"></a>笔记正文</h3><a class="btn-beautify blue larger" href="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Docker%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/Docker2022.html"   title="下载笔记"><i class="far fa-hand-point-right"></i><span>下载笔记</span></a><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://love.code-gray.com/" frameborder="1" scrolling="yes" width="320" height="240"</iframe></div>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假每日一题 &amp; 双指针、BFS与图论(习题课)</title>
      <link href="/2022/12/26/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20&amp;%20%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E4%B8%8E%E5%9B%BE%E8%AE%BA(%E4%B9%A0%E9%A2%98%E8%AF%BE)/"/>
      <url>/2022/12/26/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20&amp;%20%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E4%B8%8E%E5%9B%BE%E8%AE%BA(%E4%B9%A0%E9%A2%98%E8%AF%BE)/</url>
      
        <content type="html"><![CDATA[<h3 id="Acwing4261-孤独的照片"><a href="#Acwing4261-孤独的照片" class="headerlink" title="Acwing4261.孤独的照片"></a>Acwing4261.孤独的照片</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/description/4264/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>Farmer John 最近购入了 N 头新的奶牛，每头奶牛的品种是更赛牛（Guernsey）或荷斯坦牛（Holstein）之一。</p><p>奶牛目前排成一排，Farmer John 想要为每个连续不少于三头奶牛的序列拍摄一张照片。</p><p>然而，他不想拍摄这样的照片，其中只有一头牛的品种是更赛牛，或者只有一头牛的品种是荷斯坦牛——他认为这头奇特的牛会感到孤立和不自然。</p><p>在为每个连续不少于三头奶牛的序列拍摄了一张照片后，他把所有「孤独的」照片，即其中只有一头更赛牛或荷斯坦奶牛的照片，都扔掉了。</p><p>给定奶牛的排列方式，请帮助 Farmer John 求出他会扔掉多少张孤独的照片。</p><p>如果两张照片以不同位置的奶牛开始或结束，则认为它们是不同的。</p><p><strong>输入格式</strong><br>输入的第一行包含 N。</p><p>输入的第二行包含一个长为 N 的字符串。如果队伍中的第 i 头奶牛是更赛牛，则字符串的第 i 个字符为 G。否则，第 i 头奶牛是荷斯坦牛，该字符为 H。</p><p><strong>输出格式</strong><br>输出 Farmer John 会扔掉的孤独的照片数量。</p><p><strong>数据范围</strong><br>3 ≤ N ≤ 5×10^5</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line">GHGHG</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p><strong>样例解释</strong><br>这个例子中的每一个长为 3 的子串均恰好包含一头更赛牛或荷斯坦牛——所以这些子串表示孤独的照片，并会被 Farmer John 扔掉。</p><p>所有更长的子串（GHGH、HGHG 和 GHGHG）都可以被接受。</p></div><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>从题目数据范围我们可以发现，<u>暴力枚举子串肯定是行不通的，时间复杂度应该是O（n）或者O（nlogn）</u>。题目的关键是如何找到孤独的牛，从题意出发，通过维护两种牛的数量来判断的话是不太可行的。为此我们不妨思考下，孤独的牛有何特点？<u>当它的左侧或右侧出现连续与它不同的牛时，它便是一头孤独的牛。</u>所以我们只要<u>找到某头牛左右两侧连续不同牛的数量，再利用乘法原理</u>就可以计算出答案了。<br>为此，我们不难写出以下代码，这里为了防止溢出，开了long long。</p></div><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> oxs[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cin &gt;&gt; oxs;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = i - <span class="number">1</span>;</span><br><span class="line">        LL lcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &gt;= <span class="number">0</span> &amp;&amp; oxs[l] != oxs[i])</span><br><span class="line">        &#123;</span><br><span class="line">            lcnt++;</span><br><span class="line">            l--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> r = i + <span class="number">1</span>;</span><br><span class="line">        LL rcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; n &amp;&amp; oxs[r] != oxs[i])</span><br><span class="line">        &#123;</span><br><span class="line">            rcnt++;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        res += lcnt * rcnt + <span class="built_in">max</span>(<span class="number">0LL</span>,lcnt - <span class="number">1</span>) + <span class="built_in">max</span>(<span class="number">0LL</span>,rcnt - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1240-完全二叉树的权值"><a href="#Acwing1240-完全二叉树的权值" class="headerlink" title="Acwing1240.完全二叉树的权值"></a>Acwing1240.完全二叉树的权值</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1242/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>给定一棵包含 N 个节点的完全二叉树，树上每个节点都有一个权值，按从上到下、从左到右的顺序依次是 A1,A2,⋅⋅⋅AN，如下图所示：</p><p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%20%26%20%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E4%B8%8E%E5%9B%BE%E8%AE%BA%28%E4%B9%A0%E9%A2%98%E8%AF%BE%29/tree.png"/></div>&lt;/div&gt;<br>现在小明要把相同深度的节点的权值加在一起，他想知道哪个深度的节点权值之和最大？</p><p>如果有多个深度的权值和同为最大，请你输出其中最小的深度。</p><p>注：根的深度是 1。</p><p><strong>输入格式</strong><br>第一行包含一个整数 N。</p><p>第二行包含 N 个整数 A1,A2,⋅⋅⋅AN。</p><p><strong>输出格式</strong><br>输出一个整数代表答案。</p><p><strong>数据范围</strong><br>1 ≤ N ≤ 10^5,<br>−10^5 ≤ Ai ≤ 10^5</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>模拟完全二叉树的每层并求和即可，只是这个过程恰好用到了双指针而已。需要注意的是，这里求和还可以用前缀和优化，常数上会小一些。</p></div><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tr[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) cin &gt;&gt; tr[i];</span><br><span class="line">    LL maxv = INT_MIN;</span><br><span class="line">    <span class="type">int</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历每一层</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> d = <span class="number">1</span>,i = <span class="number">1</span>;i &lt;= n;d++,i *= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL val = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//每一层累加</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i;j &lt; i + (<span class="number">1</span> &lt;&lt; d - <span class="number">1</span>) &amp;&amp; j &lt;= n;j++) val += tr[j];</span><br><span class="line">        <span class="keyword">if</span>(val &gt; maxv)</span><br><span class="line">        &#123;</span><br><span class="line">            maxv = val;</span><br><span class="line">            depth = d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; depth &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1096-地牢大师"><a href="#Acwing1096-地牢大师" class="headerlink" title="Acwing1096.地牢大师"></a>Acwing1096.地牢大师</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1098/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>你现在被困在一个三维地牢中，需要找到最快脱离的出路！</p><p>地牢由若干个单位立方体组成，其中部分不含岩石障碍可以直接通过，部分包含岩石障碍无法通过。</p><p>向北，向南，向东，向西，向上或向下移动一个单元距离均需要一分钟。</p><p>你不能沿对角线移动，迷宫边界都是坚硬的岩石，你不能走出边界范围。</p><p>请问，你有可能逃脱吗？</p><p>如果可以，需要多长时间？</p><p><strong>输入格式</strong><br>输入包含多组测试数据。</p><p>每组数据第一行包含三个整数 L,R,C 分别表示地牢层数，以及每一层地牢的行数和列数。</p><p>接下来是 L 个 R 行 C 列的字符矩阵，用来表示每一层地牢的具体状况。</p><p>每个字符用来描述一个地牢单元的具体状况。</p><p>其中, 充满岩石障碍的单元格用”#”表示，不含障碍的空单元格用”.”表示，你的起始位置用”S”表示，终点用”E”表示。</p><p>每一个字符矩阵后面都会包含一个空行。</p><p>当输入一行为”0 0 0”时，表示输入终止。</p><p><strong>输出格式</strong><br>每组数据输出一个结果，每个结果占一行。</p><p>如果能够逃脱地牢，则输出”Escaped in x minute(s).”，其中X为逃脱所需最短时间。</p><p>如果不能逃脱地牢，则输出”Trapped!”。</p><p><strong>数据范围</strong><br>1 ≤ L,R,C ≤ 100</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">S....</span><br><span class="line">.###.</span><br><span class="line">.##..</span><br><span class="line">###.#</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">##.##</span><br><span class="line">##...</span><br><span class="line"></span><br><span class="line">#####</span><br><span class="line">#####</span><br><span class="line">#.###</span><br><span class="line">####E</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line">S##</span><br><span class="line">#E#</span><br><span class="line">###</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Escaped in <span class="number">11</span> <span class="built_in">minute</span>(s).</span><br><span class="line">Trapped!</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>本质上就是<a href="https://www.acwing.com/problem/content/1103/">AcWing 1101. 献给阿尔吉侬的花束</a>这题的三维扩展,<br>需要注意的就是坐标偏移量多了上下。</p></div><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PIII</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> L,R,C;</span><br><span class="line"><span class="type">char</span> g[N][N][N];</span><br><span class="line"><span class="type">int</span> dist[N][N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">6</span>] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dy[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dz[<span class="number">6</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(PIII start,PIII end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;PIII&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">-1</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[start.a][start.b][start.c] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        PIII t = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(t.a == end.a &amp;&amp; t.b == end.b &amp;&amp; t.c == end.c) <span class="keyword">return</span> dist[t.a][t.b][t.c];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">6</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = t.a + dx[i],y = t.b + dy[i],z = t.c + dz[i];</span><br><span class="line">            <span class="comment">//越界</span></span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= L || y &lt; <span class="number">0</span> || y &gt;= R || z &lt; <span class="number">0</span> || z &gt;= C) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//障碍物</span></span><br><span class="line">            <span class="keyword">if</span>(g[x][y][z] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//计算过</span></span><br><span class="line">            <span class="keyword">if</span>(dist[x][y][z] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dist[x][y][z] = dist[t.a][t.b][t.c] + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x,y,z&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; L &gt;&gt; R &gt;&gt; C,L || R || C)</span><br><span class="line">    &#123;</span><br><span class="line">        PIII start,end;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; L;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; R;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; C;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    cin &gt;&gt; g[i][j][k];</span><br><span class="line">                    <span class="keyword">if</span>(g[i][j][k] == <span class="string">&#x27;S&#x27;</span>) start = &#123;i,j,k&#125;;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(g[i][j][k] == <span class="string">&#x27;E&#x27;</span>) end = &#123;i,j,k&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">bfs</span>(start,end);</span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;Trapped!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Escaped in %d minute(s).\n&quot;</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1233-全球变暖"><a href="#Acwing1233-全球变暖" class="headerlink" title="Acwing1233. 全球变暖"></a>Acwing1233. 全球变暖</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1235/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>你有一张某海域 N×N 像素的照片，”.”表示海洋、”#”表示陆地，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">.##....</span><br><span class="line">.##....</span><br><span class="line">....##.</span><br><span class="line">..####.</span><br><span class="line">...###.</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>其中”上下左右”四个方向上连在一起的一片陆地组成一座岛屿，例如上图就有 2 座岛屿。</p><p>由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。</p><p>具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。</p><p>例如上图中的海域未来会变成如下样子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">....#..</span><br><span class="line">.......</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没。</p><p><strong>输入格式</strong><br>第一行包含一个整数N。</p><p>以下 N 行 N 列，包含一个由字符”#”和”.”构成的 N×N 字符矩阵，代表一张海域照片，”#”表示陆地，”.”表示海洋。</p><p>照片保证第 1 行、第 1 列、第 N 行、第 N 列的像素都是海洋。</p><p><strong>输出格式</strong><br>一个整数表示答案。</p><p><strong>数据范围</strong><br>1 ≤ N ≤ 1000</p><p><strong>输入样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line">.......</span><br><span class="line">.##....</span><br><span class="line">.##....</span><br><span class="line">....##.</span><br><span class="line">..####.</span><br><span class="line">...###.</span><br><span class="line">.......</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><strong>输入样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line">.........</span><br><span class="line">.##.##...</span><br><span class="line">.#####...</span><br><span class="line">.##.##...</span><br><span class="line">.........</span><br><span class="line">.##.#....</span><br><span class="line">.#.###...</span><br><span class="line">.#..#....</span><br><span class="line">.........</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题是<span class='nota' data-nota='洪水灌溉算法，可用bfs和dfs两种方式实现，实际就是在图上找连通块的过程。'>Flood Fill</span>的经典应用，<br>在找岛屿的过程中，记录下每个岛屿的总面积和临海面积，即可算出答案。</p></div><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> st[N][N];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> sx,<span class="type">int</span> sy,<span class="type">int</span> &amp; total,<span class="type">int</span> &amp; bound)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;PII&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;sx,sy&#125;);</span><br><span class="line">    st[sx][sy] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        PII t = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">        total++;</span><br><span class="line">        <span class="type">bool</span> is_sea = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = t.x + dx[i],y = t.y + dy[i];</span><br><span class="line">            <span class="comment">//越界</span></span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//是海</span></span><br><span class="line">            <span class="keyword">if</span>(g[x][y] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                is_sea = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//访问过</span></span><br><span class="line">            <span class="keyword">if</span>(st[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">            st[x][y] = <span class="literal">true</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(is_sea) bound++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; g[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历每个连通块，统计岛的面积和靠近海的块数</span></span><br><span class="line">            <span class="keyword">if</span>(!st[i][j] &amp;&amp; g[i][j] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> total = <span class="number">0</span>,bound = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">bfs</span>(i,j,total,bound);</span><br><span class="line">                <span class="keyword">if</span>(total == bound) res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1207-大臣的旅费"><a href="#Acwing1207-大臣的旅费" class="headerlink" title="Acwing1207. 大臣的旅费"></a>Acwing1207. 大臣的旅费</h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify blue larger" href="https://www.acwing.com/problem/content/1209/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>很久以前，T王国空前繁荣。</p><p>为了更好地管理国家，王国修建了大量的快速路，用于连接首都和王国内的各大城市。</p><p>为节省经费，T国的大臣们经过思考，制定了一套优秀的修建方案，使得任何一个大城市都能从首都直接或者通过其他大城市间接到达。</p><p>同时，如果不重复经过大城市，从首都到达每个大城市的方案都是唯一的。</p><p>J是T国重要大臣，他巡查于各大城市之间，体察民情。</p><p>所以，从一个城市马不停蹄地到另一个城市成了J最常做的事情。</p><p>他有一个钱袋，用于存放往来城市间的路费。</p><p>聪明的J发现，如果不在某个城市停下来修整，在连续行进过程中，他所花的路费与他已走过的距离有关，在走第x千米到第x+1千米这一千米中（x是整数），他花费的路费是x+10这么多。也就是说走1千米花费11，走2千米要花费23。</p><p>J大臣想知道：他从某一个城市出发，中间不休息，到达另一个城市，所有可能花费的路费中最多是多少呢？</p><p><strong>输入格式</strong><br>输入的第一行包含一个整数 n，表示包括首都在内的T王国的城市数。</p><p>城市从 1 开始依次编号，1 号城市为首都。</p><p>接下来 n−1 行，描述T国的高速路（T国的高速路一定是 n−1 条）。</p><p>每行三个整数 Pi,Qi,Di，表示城市 Pi 和城市 Qi 之间有一条双向高速路，长度为 Di 千米。</p><p><strong>输出格式</strong><br>输出一个整数，表示大臣J最多花费的路费是多少。</p><p><strong>数据范围</strong><br>1 ≤ n ≤ 10^5,<br>1≤ Pi,Qi ≤ n,<br>1 ≤ Di ≤ 1000</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> </span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">2</span> </span><br><span class="line"><span class="number">1</span>  <span class="number">3</span>  <span class="number">1</span> </span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">5</span> </span><br><span class="line"><span class="number">2</span>  <span class="number">5</span>  <span class="number">4</span> </span><br></pre></td></tr></table></figure><br><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">135</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题目本质上就是求一个树的直径，可以当作求树的直径的一种简单的模板背过，因为还有其它更优的方式。这个过程是：<br>先任取树上一点，找到距离该点的最远距离，假定为点u，再重复一次这个过程，找到距离点u的最远距离即为答案。<br>这里存图用的是数组模拟单链表的方式，这里单独把模板抽取出来，仅供参考。</p></div><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>,M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b,w[idx] = c,ne[idx] = h[a],h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> p,<span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dist[u] = d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j != p)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(j,u,d + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化h</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//求树的直径</span></span><br><span class="line">    <span class="comment">//任取一点，找到距它最远距离的点u</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//再执行一次上面的操作，找到距离u最远的点，即为树的直径</span></span><br><span class="line">    <span class="type">int</span> maxv = INT_MIN,u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dist[i] &gt; maxv)</span><br><span class="line">        &#123;</span><br><span class="line">            maxv = dist[i];</span><br><span class="line">            u = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(u,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    maxv = INT_MIN;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) maxv = <span class="built_in">max</span>(maxv,dist[i]);</span><br><span class="line">    cout &lt;&lt; <span class="number">10</span> * maxv + (maxv + <span class="number">1LL</span>) * maxv / <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存图模板</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = 题目给的点数,M = 题目给的边数 / (单向边和点数相同，双向边为点数<span class="number">2</span>倍);</span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],w[M],idx;</span><br><span class="line"><span class="comment">//加边函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    ... <span class="comment">//存图的其他信息，这里以边权举例</span></span><br><span class="line">    w[idx] = c;</span><br><span class="line">    ...</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化h</span></span><br><span class="line">    <span class="built_in">memset</span>(h,<span class="number">-1</span>,<span class="keyword">sizeof</span> h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图的遍历(例如遍历点u的临边)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u];i != <span class="number">-1</span>;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//取出相邻点j</span></span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="comment">//取出其他信息</span></span><br><span class="line">        <span class="type">int</span> weight = w[i];</span><br><span class="line">        ... <span class="comment">//其他操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>更多请查看: <a href="https://www.acwing.com/user/myspace/index/194557/">我的Acwing主页</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> BFS </tag>
            
            <tag> 图论 </tag>
            
            <tag> 乘法原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署Twikoo评论功能，强烈推荐！</title>
      <link href="/2022/12/25/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/12/25/Hexo%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="tip bell"><p>文章主要讲Hexo下Butterfly主题的添加方式，不同的主题可参考着修改。主要用到了两个技术：一个是MonogoDB提供的云函数，另一个是利用Vercel对云函数进行部署。在学习如何添加前，请读者先粗略浏览一遍Twikoo的官方文档，其实官方写很细致。<a href="https://twikoo.js.org/quick-start.html#vercel-%E9%83%A8%E7%BD%B2">快速上手 | Twikoo文档</a></p></div><hr><h3 id="申请MonogoDB云函数"><a href="#申请MonogoDB云函数" class="headerlink" title="申请MonogoDB云函数"></a>申请MonogoDB云函数</h3><h4 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h4><a class="btn-beautify pink larger" href="https://www.mongodb.com/cloud/atlas/register"   title="点击注册"><i class="far fa-hand-point-right"></i><span>点击注册</span></a><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/register-monogoDB.png"/></div></div><div class="note simple"><p>这里根据意思填写即可，主要是邮箱必须有效，后续需要邮箱进行验证。</p></div><h4 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h4><p><strong>点击邮箱验证即可</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/verify-monogoDB.png"/></div></div></p><p><strong>这里MonogoDB会提示你验证成功，点击继续。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/success-verify.png"/></div></div></p><h4 id="填写问卷"><a href="#填写问卷" class="headerlink" title="填写问卷"></a>填写问卷</h4><p><strong>这里最好跟图中保持一致，特别是编程语言必须选JS。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/note-questionaire.png"/></div></div></p><hr><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><strong>选择免费的即可，点击创建。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/choose-db.png"/></div></div></p><p><strong>提供商必须选AWS，地区选US或香港都可以，推荐选择香港，然后点击创建。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/db-setting.png"/></div></div></p><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p><strong>创建一个数据库用户，并将账号密码记下来，然后点击创建用户。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/create-dbuser.png"/></div></div></p><p><strong>将IP为0.0.0.0加入白名单，点击添加，最后点击完成。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/create-dbip.png"/></div></div></p><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p><strong>点击白色的Connect进行连接，选择如下这个进入。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/db-connect1.png"/></div></div></p><p><strong>将红色框中的内容进行复制，将<password>部分替换为自己的数据库密码，并将这段保存下来。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/db-connect2.png"/></div></div></p><hr><h3 id="申请Vercel部署"><a href="#申请Vercel部署" class="headerlink" title="申请Vercel部署"></a>申请Vercel部署</h3><h4 id="注册账号-1"><a href="#注册账号-1" class="headerlink" title="注册账号"></a>注册账号</h4><p><strong>这里强烈推荐GitHub关联注册，非常方便。没有GitHub账号的建议先去注册一个。</strong></p><a class="btn-beautify pink larger" href="https://vercel.com/signup"   title="点击注册"><i class="far fa-hand-point-right"></i><span>点击注册</span></a><h4 id="搭建部署环境"><a href="#搭建部署环境" class="headerlink" title="搭建部署环境"></a>搭建部署环境</h4><p><strong>注册好Vercel账号后，点击下面跳转到部署页面。</strong></p><a class="btn-beautify blue larger" href="https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fimaegoo%2Ftwikoo%2Ftree%2Fmain%2Fsrc%2Fserver%2Fvercel-min"   title="Deploy"><i class="far fa-hand-point-right"></i><span>Deploy</span></a><p><strong>创建一个私有仓库用来部署云函数，名字随便取，点击创建后等待构建完成。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-reposity.png"/></div></div></p><p><strong>出现如下的祝贺表示成功，然后点击右上跳转到控制台。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/congratulation.png"/></div></div></p><hr><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p><strong>依次点击Settings-&gt;Environment Variables进入到环境变量添加，添加环境变量<em>MONGODB_URI</em>，其中值为之前保存的字符串，最后点击保存即可。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-settings1.png"/></div></div></p><p><strong>如果之前数据库地区写了香港，还需要在Settings-&gt;Functions中修改地区为香港，如果是US则可以跳过这一步，最后点击保存即可。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-settings2.png"/></div></div></p><h4 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h4><p><strong>进入到Deployments，点击右侧三个点，再点击红色标记的Redeploy。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-settings3.png"/></div></div></p><p><strong>勾选图中的Redeploy选项，点击REDEPLOY进行部署,等待状态变为绿色表示部署成功。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/vercel-settings4.png"/></div></div></p><p><strong>跳转域名查看云函数是否有效，若出现以下情况，则表示云函数有效。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/func-success.png"/></div></div></p><hr><h3 id="Hexo配置评论"><a href="#Hexo配置评论" class="headerlink" title="Hexo配置评论"></a>Hexo配置评论</h3><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><p><strong>以下主要是针对ButterFly主题的配置，其他主题请参考官方文档进行配置，主要是找云函数链接应该放在哪个属性。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/hexo-settings.png"/></div></div></p><h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><p><strong>运行Hexo，测试评论功能是否可以正常使用。</strong><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Hexo%E3%81%AE%E9%AD%94%E6%94%B9%E4%B9%8B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/hexo-test.png"/></div></div></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><div class="tip bell"><p>以上就是利用Twikoo部署评论功能的全部教程，此文也是在我自己实现这个功能后立刻写出来的。个人认为，当学会一项新技术去分享给别人的时候，不仅能够让更多人受益，同时也给自己带来好心情，还能更好的掌握这项技术，这何尝不是一件美事呢~</p></div>]]></content>
      
      
      <categories>
          
          <category> Hexoの魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机知识 </tag>
            
            <tag> 云函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing蓝桥杯辅导课之双指针、BFS和图论</title>
      <link href="/2022/12/25/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/"/>
      <url>/2022/12/25/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="tip info"><p><strong>文章内容主要是对课程学习的一个总结，同时也是方便自己日后的复习和有需要人士的学习。</strong></p></div><hr><h3 id="课程提纲"><a href="#课程提纲" class="headerlink" title="课程提纲"></a>课程提纲</h3><ol><li><strong>Acwing1237.螺旋折线</strong></li><li><strong>双指针</strong><ul><li><strong>双指针模板</strong></li><li><strong>Acwing1238.日志统计</strong></li></ul></li><li><strong>BFS</strong><ul><li><strong>BFS模板</strong></li><li><strong>Acwing1101.献给阿尔吉侬的花束</strong></li></ul></li><li><strong>图论</strong><ul><li><strong>Acwing1224.交换瓶子</strong></li></ul></li></ol><hr><h3 id="Acwing1237-螺旋折线"><a href="#Acwing1237-螺旋折线" class="headerlink" title="Acwing1237.螺旋折线"></a>Acwing1237.螺旋折线</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1239/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>如下图所示的螺旋折线经过平面上所有整点恰好一次。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/luoxuanxian.png"/></div></div><p>对于整点 (X,Y)，我们定义它到原点的距离 dis(X,Y) 是从原点到 (X,Y) 的螺旋折线段的长度。</p><p>例如 dis(0,1)=3,dis(−2,−1)=9</p><p>给出整点坐标 (X,Y)，你能计算出 dis(X,Y) 吗？<br><strong>输入格式</strong><br>包含两个整数 X,Y。</p><p><strong>输出格式</strong><br>输出一个整数，表示 dis(X,Y)。</p><p><strong>数据范围</strong><br>−10^9 ≤ X,Y ≤ 10^9</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>对于上面这样一道题，我们首先想到的应该是<u>模拟</u>。但由于题目所给的<u>数据范围较大</u>，如果采用直接模拟的方式，大概率是<u>超时</u>的，但也能够在比赛中<u>取得一个比较不错的分数</u>。从数据范围我们也不难发现，这应该是一道<u>找规律</u>的题目。为此我们给图上的每个点进行标注，可以得到如下的规律。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/zhaoguilv.png"/></div></div><p>由此，我们不难写出以下代码。</p></div><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(x) &lt;= y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = y;</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n - <span class="number">1</span>) * (<span class="number">2</span> * n) + x - (-n) &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(y) &lt;= x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = x;</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n) * (<span class="number">2</span> * n) + (n - y) &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(x) &lt;= <span class="built_in">abs</span>(y) + <span class="number">1</span> &amp;&amp; y &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">abs</span>(y);</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n) * (<span class="number">2</span> * n + <span class="number">1</span>) + (n - x) &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">abs</span>(x);</span><br><span class="line">        cout &lt;&lt; (LL)(<span class="number">2</span> * n - <span class="number">1</span>) * (<span class="number">2</span> * n - <span class="number">1</span>) + y - (-n + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1238-日志统计"><a href="#Acwing1238-日志统计" class="headerlink" title="Acwing1238.日志统计"></a>Acwing1238.日志统计</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1240/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>小明维护着一个程序员论坛。现在他收集了一份”点赞”日志，日志共有 N 行。</p><p>其中每一行的格式是：</p><blockquote><p>ts id</p></blockquote><p>表示在 ts 时刻编号 id 的帖子收到一个”赞”。</p><p>现在小明想统计有哪些帖子曾经是”热帖”。</p><p>如果一个帖子曾在任意一个长度为 D 的时间段内收到不少于 K 个赞，小明就认为这个帖子曾是”热帖”。</p><p>具体来说，如果存在某个时刻 T 满足该帖在 [T,T+D) 这段时间内(注意是左闭右开区间)收到不少于 K 个赞，该帖就曾是”热帖”。</p><p>给定日志，请你帮助小明统计出所有曾是”热帖”的帖子编号。</p><p><strong>输入格式</strong><br>第一行包含三个整数 N,D,K。</p><p>以下 N 行每行一条日志，包含两个整数 ts 和 id。</p><p><strong>输出格式</strong><br>按从小到大的顺序输出热帖 id。</p><p>每个 id 占一行。</p><p><strong>数据范围</strong><br>1 ≤ K ≤ N ≤ 10^5,<br>0 ≤ts,id≤ 10^5,<br>1 ≤ D ≤ 10000</p><p><strong>输入样例:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">100</span> <span class="number">3</span></span><br><span class="line"><span class="number">100</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p><strong>输出样例:</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>读题后我们可以发现，通过<u>遍历长度为D的时间段，并每次统计时间段内id的获赞数， 当cnt&gt;=K时进行标记</u>即可得到所求结果。但实现代码后，<u>时间复杂度为O（N * D）</u>，题目给出的数据范围经计算后会超时，所以我们需要继续优化。对于每个时间段统计的获赞数，我们发现<u>实际上有很多重复的部分，在时间段移动的过程中，日志记录只会变化前后一段</u>，为此我们可以使用<u>双指针进行优化</u>。由此，我们不难写出以下代码。</p></div><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">int</span> n,d,k;</span><br><span class="line">PII logs[N];</span><br><span class="line"><span class="type">int</span> cnt[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; d &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) cin &gt;&gt; logs[i].first &gt;&gt; logs[i].second;</span><br><span class="line">    <span class="built_in">sort</span>(logs,logs + n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> id = logs[i].second;</span><br><span class="line">        <span class="comment">//当前id的日志数量+1</span></span><br><span class="line">        cnt[id]++;</span><br><span class="line">        <span class="comment">//删掉之前超出时间段的日志</span></span><br><span class="line">        <span class="keyword">while</span>(logs[i].first - logs[j].first &gt;= d)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[logs[j].second]--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt[id] &gt;= k) st[id] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100005</span>;i++) <span class="keyword">if</span>(st[i]) cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1101-献给阿尔吉侬的花束"><a href="#Acwing1101-献给阿尔吉侬的花束" class="headerlink" title="Acwing1101.献给阿尔吉侬的花束"></a>Acwing1101.献给阿尔吉侬的花束</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1103/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>阿尔吉侬是一只聪明又慵懒的小白鼠，它最擅长的就是走各种各样的迷宫。</p><p>今天它要挑战一个非常大的迷宫，研究员们为了鼓励阿尔吉侬尽快到达终点，就在终点放了一块阿尔吉侬最喜欢的奶酪。</p><p>现在研究员们想知道，如果阿尔吉侬足够聪明，它最少需要多少时间就能吃到奶酪。</p><p>迷宫用一个 R×C 的字符矩阵来表示。</p><p>字符 S 表示阿尔吉侬所在的位置，字符 E 表示奶酪所在的位置，字符 # 表示墙壁，字符 . 表示可以通行。</p><p>阿尔吉侬在 1 个单位时间内可以从当前的位置走到它上下左右四个方向上的任意一个位置，但不能走出地图边界。</p><p><strong>输入格式</strong><br>第一行是一个正整数 T，表示一共有 T 组数据。</p><p>每一组数据的第一行包含了两个用空格分开的正整数 R 和 C，表示地图是一个 R×C 的矩阵。</p><p>接下来的 R 行描述了地图的具体内容，每一行包含了 C 个字符。字符含义如题目描述中所述。保证有且仅有一个 S 和 E。</p><p><strong>输出格式</strong><br>对于每一组数据，输出阿尔吉侬吃到奶酪的最少单位时间。</p><p>若阿尔吉侬无法吃到奶酪，则输出“oop!”（只输出引号里面的内容，不输出引号）。</p><p>每组数据的输出结果占一行。</p><p><strong>数据范围</strong><br>1&lt; T ≤ 10,<br>2 ≤ R,C ≤ 200</p><p><strong>输入样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">.S..</span><br><span class="line">###.</span><br><span class="line">..E.</span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">.S..</span><br><span class="line">.E..</span><br><span class="line">....</span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line">.S..</span><br><span class="line">####</span><br><span class="line">..E.</span><br></pre></td></tr></table></figure></p><p><strong>输出样例：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">oop!</span><br></pre></td></tr></table></figure></p></div><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题本质上就是一个<u>简单的棋盘BFS模型</u>，BFS一般有两种模型：<span class='nota' data-nota='棋盘模型，顾名思义，就是在棋盘上BFS的过程，其中每个棋盘方格作为BFS的一个状态进行转移，常见的棋盘有迷宫，地图等'>棋盘模型</span>和<span class='nota' data-nota='状态模型，可以看成一种广义的棋盘模型，它是将整个棋盘的状态当作BFS的一个状态进行转移，常见的状态有八数码游戏等'>状态模型</span>，那么万变不离其宗还是套BFS模板，由此，根据题意进行转换，我们不难写出以下代码。</p></div><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(PII start,PII end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;PII&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">-1</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[start.first][start.second] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">if</span>(end == t) <span class="keyword">return</span> dist[end.first][end.second];</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = t.first + dx[i],y = t.second + dy[i];</span><br><span class="line">            <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= n || y &lt; <span class="number">0</span> || y &gt;= m) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(g[x][y] == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dist[x][y] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dist[x][y] = dist[t.first][t.second] + <span class="number">1</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(&#123;x,y&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        PII start,end;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                cin &gt;&gt; g[i][j];</span><br><span class="line">                <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;S&#x27;</span>) start = &#123;i,j&#125;;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(g[i][j] == <span class="string">&#x27;E&#x27;</span>) end = &#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">bfs</span>(start,end);</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;oop!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Acwing1224-交换瓶子"><a href="#Acwing1224-交换瓶子" class="headerlink" title="Acwing1224.交换瓶子"></a>Acwing1224.交换瓶子</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><a class="btn-beautify pink larger" href="https://www.acwing.com/problem/content/1226/"   title="原题链接"><i class="far fa-hand-point-right"></i><span>原题链接</span></a><div class="note default modern"><p>有 N 个瓶子，编号 1∼N，放在架子上。</p><p>比如有 5 个瓶子：</p><p>2 1 3 5 4<br>要求每次拿起 2 个瓶子，交换它们的位置。</p><p>经过若干次后，使得瓶子的序号为：</p><p>1 2 3 4 5<br>对于这么简单的情况，显然，至少需要交换 2 次就可以复位。</p><p>如果瓶子更多呢？你可以通过编程来解决。</p><p><strong>输入格式</strong><br>第一行包含一个整数 N，表示瓶子数量。</p><p>第二行包含 N 个整数，表示瓶子目前的排列状况。</p><p><strong>输出格式</strong><br>输出一个正整数，表示至少交换多少次，才能完成排序。</p><p><strong>数据范围</strong><br>1 ≤ N ≤ 10000,</p><p><strong>输入样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><br><strong>输出样例1：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><br><strong>输入样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><br><strong>输出样例2：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p></div><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><div class="note simple"><p>这题本身是一道<u>很经典的题目，思维非常巧妙</u>，尽管它归属图论部分，也只是因为<u>它的本质用到了图论的置换群</u>。我们将<u>每个数字与它应在位置的数字连一条边</u>，可得到如下的图。</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://gray-read.oss-cn-shanghai.aliyuncs.com/hexo-demo/article/Acwing%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%BE%85%E5%AF%BC%E8%AF%BE%E4%B9%8B%E5%8F%8C%E6%8C%87%E9%92%88%E3%80%81BFS%E5%92%8C%E5%9B%BE%E8%AE%BA/zhaoguilv.png"/></div></div><p>并且我们可以发现，<u>交换一对环内的数字</u>，就是将两条边的方向置换，<u>即将一个环拆分成两个环</u>；<u>交换一对环外的数字</u>，也是将两条边的方向置换，<u>但是将两个环合并成一个环</u>。</p><p>假定有k个这样的环，我们会发现，通过这两种操作，至少只需要n - k次就可以将所有的数字变为自环。</p></div><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i;!st[j];j = a[j]) st[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; n - cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> BFS </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6部分新特性</title>
      <link href="/2022/12/23/ES6%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/12/23/ES6%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><div class="note default modern"><p><strong>下面只是对于<mark class="hl-label blue">后端所需知识</mark> 的补充。并非完整的ES6新特性，如有相应需求可查看官网文档进行学习。</strong><br><strong>由于JS官方文档是全英文的，不方便大家学习。这里给大家提供一个比较友好的中文文档，请点这里<a class="btn-beautify pink larger" href="http://caibaojian.com/es6/"   title="caibaojian"><i class="far fa-hand-point-right"></i><span>caibaojian</span></a></strong></p></div><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><h4 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>; <span class="comment">//a有作用域范围,且不能再次声明</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">5</span>;<span class="comment">//const用于定义常量</span></span><br></pre></td></tr></table></figure><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span>[x,y,z] = arr; <span class="comment">//将arr的值分别赋予x,y,z</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:username,age&#125; = person</span><br><span class="line"><span class="comment">//这里将person对象的值分别赋予name和age</span></span><br><span class="line"><span class="comment">//且给name取别名为username</span></span><br></pre></td></tr></table></figure><h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h3><h4 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello.vue&quot;</span></span><br><span class="line"><span class="comment">//是否以...开头</span></span><br><span class="line">str.<span class="title function_">startsWith</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="comment">//是否以...结尾</span></span><br><span class="line">str.<span class="title function_">endsWith</span>(<span class="string">&quot;.vue&quot;</span>)</span><br><span class="line"><span class="comment">//是否包含...</span></span><br><span class="line">str.<span class="title function_">includes</span>(<span class="string">&quot;e&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可将一大段字符串放在``中</span></span><br><span class="line"><span class="keyword">let</span> ss = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">   &lt;span&gt;hello&lt;/span&gt;</span></span><br><span class="line"><span class="string">   &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">//在模板字符串中可用插值语法$&#123;JS表达式&#125;</span></span><br><span class="line"><span class="keyword">let</span> info = <span class="string">&#x27;我是$&#123;name&#125;,今年$&#123;age + 10&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="函数与对象"><a href="#函数与对象" class="headerlink" title="函数与对象"></a>函数与对象</h3><h4 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a,b = <span class="number">1</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不定参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">...values</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> values.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//箭头函数</span></span><br><span class="line"><span class="comment">//只有一句</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">print</span> = (<span class="params">a,b</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b)</span><br><span class="line"><span class="comment">//只需返回</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">a,b</span>) =&gt; a + b</span><br><span class="line"><span class="comment">//一般形式</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">normal</span> = (<span class="params">a,b,c</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = a + b + c</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解构</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">hello</span> = (<span class="params">&#123;name&#125;</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span> + name)</span><br></pre></td></tr></table></figure><h4 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h4><p>灵活利用Object提供的方法，有时候能极大简化代码!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取key,value,entry</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(person)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(person)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">const</span> one = &#123;a : <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> two = &#123;b : <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> three = &#123;c : <span class="number">3</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(one,two,three)</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明对象简写</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">23</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;<span class="attr">name</span>: name,age : age&#125;</span><br><span class="line"><span class="comment">//变量与对象属性同名,可简写为:</span></span><br><span class="line"><span class="keyword">const</span> person2 = &#123;name,age&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象函数简写</span></span><br><span class="line"><span class="keyword">let</span> person3 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params">food</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃&#x27;</span> + food)    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//箭头函数的this指向windows,不能使用this</span></span><br><span class="line">    <span class="attr">eat2</span>: <span class="function"><span class="params">food</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span> + <span class="string">&#x27;吃&#x27;</span> + food)</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">eat3</span>(<span class="params">food</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;吃&#x27;</span> + food)    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝对象</span></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">15</span>&#125;</span><br><span class="line"><span class="keyword">let</span> someone = &#123;...person&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并对象</span></span><br><span class="line"><span class="keyword">let</span> age1 = &#123;<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">let</span> name1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//像name等属性重名,会被后来的属性覆盖</span></span><br><span class="line"><span class="keyword">let</span> p1 = &#123;...age1,...name1&#125;</span><br></pre></td></tr></table></figure></p><h3 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h3><h4 id="map和reduce"><a href="#map和reduce" class="headerlink" title="map和reduce"></a>map和reduce</h4><p>map用于处理数组，reduce用于计算数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将arr经过map中的函数处理后返回</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">arr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//为arr中的每一个元素执行该函数</span></span><br><span class="line"><span class="comment">//参数1.先前处理的值  参数2.当前处理的值</span></span><br><span class="line"><span class="comment">//参数3.数组下标</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>,<span class="number">40</span>,-<span class="number">2</span>,<span class="number">5</span>,-<span class="number">1</span>]</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Promise异步编排"><a href="#Promise异步编排" class="headerlink" title="Promise异步编排"></a>Promise异步编排</h3><h4 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//异步操作</span></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;www.xxx.com&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一次异步获取的结果&quot;</span> + data)</span><br><span class="line">            <span class="title function_">resolve</span>(data)        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)                              </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">obj</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">            $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">                <span class="attr">url</span>:<span class="string">` www.other.com + <span class="subst">$&#123;obj.id&#125;</span>`</span>,</span><br><span class="line">                <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二次异步获取的结果&quot;</span> + data)</span><br><span class="line">                    <span class="title function_">resolve</span>(data)                </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err)                </span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">obj2</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//...继续发送异步请求</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">            </span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树与树状数组</title>
      <link href="/2022/12/23/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2022/12/23/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%B8%8E%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="有关单点修改，区间查询的两个算法"><a href="#有关单点修改，区间查询的两个算法" class="headerlink" title="有关单点修改，区间查询的两个算法"></a>有关单点修改，区间查询的两个算法</h2><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],tr[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = u;i &lt;= n;i += <span class="built_in">lowbit</span>(i)) tr[i] += v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = u;i &gt; <span class="number">0</span>;i -= <span class="built_in">lowbit</span>(i)) sum += tr[i];</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">add</span>(i,a[i]);</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k,x,y;</span><br><span class="line">        cin &gt;&gt; k &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(!k) cout &lt;&lt; <span class="built_in">query</span>(y) - <span class="built_in">query</span>(x - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">&#125;tr[<span class="number">4</span> * N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[u].sum = tr[u &lt;&lt; <span class="number">1</span>].sum + tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) tr[u] = &#123;l,r,a[r]&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tr[u] = &#123;l,r&#125;;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>,l,mid),<span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) sum = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) sum += <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> a,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l == tr[u].r) tr[u].sum += v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a &lt;= mid) <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>,a,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,a,v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;k,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(!k) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,x,y));</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(<span class="number">1</span>,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多请查看: <a href="https://www.acwing.com/user/myspace/index/194557/">我的Acwing主页</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
